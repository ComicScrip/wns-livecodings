name: staging
services:
  stagingDB:
    image: postgres:15-alpine
    environment:
      - POSTGRES_PASSWORD=${DB_PASS:-postgres}
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -d postgres -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5
    volumes:
      - stagingDB:/var/lib/postgresql/data
    networks:
      - stagingNetwork

  server:
    depends_on:
      stagingDB:
        condition: service_healthy
    environment:
      - NODE_ENV=${NODE_ENV:-production}
      - DB_HOST=${DB_HOST:-stagingDB}
      - SERVER_HOST=${SERVER_HOST:-localhost}
      - SERVER_PORT=${SERVER_PORT:-4000}
      - JWT_PRIVATE_KEY=${JWT_PRIVATE_KEY:-abcdfzfefzefzefzeefghijkl}
      - CORS_ALLOWED_ORIGINS=${CORS_ALLOWED_ORIGINS:-http://localhost:8001}
    image: scrip/wns-livecodings-server:staging
    networks:
      - stagingNetwork
    healthcheck:
      test: 'curl --fail --request GET -H ''content-type:application/json'' --url ''http://localhost:4000/graphql?query=%7B__typename%7D'''
      interval: 5s
      timeout: 5s
      retries: 10

  client:
    image: scrip/wns-livecodings-client:staging
    networks:
      - stagingNetwork

  nginx:
    image: nginx:1.21.3
    depends_on:
      client:
        condition: service_started
      server:
        condition: service_healthy
    restart: always
    ports:
      - ${GATEWAY_PORT:-8001}:80
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf
      - ./logs:/var/log/nginx
    networks:
      - stagingNetwork

volumes:
  stagingDB:

networks:
  stagingNetwork:
