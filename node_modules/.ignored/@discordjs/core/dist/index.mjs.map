{"version":3,"sources":["../src/api/applicationCommands.ts","../src/api/channel.ts","../src/api/guild.ts","../src/api/interactions.ts","../src/api/invite.ts","../src/api/oauth2.ts","../src/api/roleConnections.ts","../src/api/sticker.ts","../src/api/thread.ts","../src/api/user.ts","../src/api/voice.ts","../src/api/webhook.ts","../src/api/index.ts","../src/client.ts","../src/util/files.ts","../src/index.ts"],"sourcesContent":["import { makeURLSearchParams, type RequestData, type REST } from '@discordjs/rest';\nimport {\n\tRoutes,\n\ttype RESTGetAPIApplicationCommandPermissionsResult,\n\ttype RESTGetAPIApplicationCommandResult,\n\ttype RESTGetAPIApplicationCommandsResult,\n\ttype RESTGetAPIGuildApplicationCommandsPermissionsResult,\n\ttype RESTPatchAPIApplicationCommandJSONBody,\n\ttype RESTPatchAPIApplicationCommandResult,\n\ttype RESTPostAPIApplicationCommandsJSONBody,\n\ttype RESTPostAPIApplicationCommandsResult,\n\ttype RESTPutAPIApplicationCommandPermissionsJSONBody,\n\ttype RESTPutAPIApplicationCommandPermissionsResult,\n\ttype RESTPutAPIApplicationCommandsJSONBody,\n\ttype RESTGetAPIApplicationCommandsQuery,\n\ttype RESTPutAPIApplicationCommandsResult,\n\ttype RESTGetAPIApplicationGuildCommandsQuery,\n\ttype Snowflake,\n} from 'discord-api-types/v10';\n\nexport class ApplicationCommandsAPI {\n\tpublic constructor(private readonly rest: REST) {}\n\n\t/**\n\t * Fetches all global commands for a application\n\t *\n\t * @see {@link https://discord.com/developers/docs/interactions/application-commands#get-global-application-commands}\n\t * @param applicationId - The application id to fetch commands for\n\t * @param query - The query options to use when fetching commands\n\t * @param options - The options to use when fetching commands\n\t */\n\tpublic async getGlobalCommands(\n\t\tapplicationId: Snowflake,\n\t\tquery: RESTGetAPIApplicationCommandsQuery = {},\n\t\t{ signal }: Pick<RequestData, 'signal'> = {},\n\t) {\n\t\treturn this.rest.get(Routes.applicationCommands(applicationId), {\n\t\t\tquery: makeURLSearchParams(query),\n\t\t\tsignal,\n\t\t}) as Promise<RESTGetAPIApplicationCommandsResult>;\n\t}\n\n\t/**\n\t * Creates a new global command\n\t *\n\t * @see {@link https://discord.com/developers/docs/interactions/application-commands#create-global-application-command}\n\t * @param applicationId - The application id to create the command for\n\t * @param body - The data to use when creating the command\n\t * @param options - The options to use when creating the command\n\t */\n\tpublic async createGlobalCommand(\n\t\tapplicationId: Snowflake,\n\t\tbody: RESTPostAPIApplicationCommandsJSONBody,\n\t\t{ signal }: Pick<RequestData, 'signal'> = {},\n\t) {\n\t\treturn this.rest.post(Routes.applicationCommands(applicationId), {\n\t\t\tbody,\n\t\t\tsignal,\n\t\t}) as Promise<RESTPostAPIApplicationCommandsResult>;\n\t}\n\n\t/**\n\t * Fetches a global command\n\t *\n\t * @see {@link https://discord.com/developers/docs/interactions/application-commands#get-global-application-command}\n\t * @param applicationId - The application id to fetch the command from\n\t * @param commandId - The command id to fetch\n\t * @param options - The options to use when fetching the command\n\t */\n\tpublic async getGlobalCommand(\n\t\tapplicationId: Snowflake,\n\t\tcommandId: Snowflake,\n\t\t{ signal }: Pick<RequestData, 'signal'> = {},\n\t) {\n\t\treturn this.rest.get(Routes.applicationCommand(applicationId, commandId), {\n\t\t\tsignal,\n\t\t}) as Promise<RESTGetAPIApplicationCommandResult>;\n\t}\n\n\t/**\n\t * Edits a global command\n\t *\n\t * @see {@link https://discord.com/developers/docs/interactions/application-commands#edit-global-application-command}\n\t * @param applicationId - The application id of the command\n\t * @param commandId - The id of the command to edit\n\t * @param body - The data to use when editing the command\n\t * @param options - The options for editing the command\n\t */\n\tpublic async editGlobalCommand(\n\t\tapplicationId: Snowflake,\n\t\tcommandId: Snowflake,\n\t\tbody: RESTPatchAPIApplicationCommandJSONBody,\n\t\t{ signal }: Pick<RequestData, 'signal'> = {},\n\t) {\n\t\treturn this.rest.patch(Routes.applicationCommand(applicationId, commandId), {\n\t\t\tbody,\n\t\t\tsignal,\n\t\t}) as Promise<RESTPatchAPIApplicationCommandResult>;\n\t}\n\n\t/**\n\t * Deletes a global command\n\t *\n\t * @see {@link https://discord.com/developers/docs/interactions/application-commands#delete-global-application-command}\n\t * @param applicationId - The application id of the command\n\t * @param commandId - The id of the command to delete\n\t * @param options - The options for deleting a command\n\t */\n\tpublic async deleteGlobalCommand(\n\t\tapplicationId: Snowflake,\n\t\tcommandId: Snowflake,\n\t\t{ signal }: Pick<RequestData, 'signal'> = {},\n\t) {\n\t\tawait this.rest.delete(Routes.applicationCommand(applicationId, commandId), { signal });\n\t}\n\n\t/**\n\t * Overwrites global commands\n\t *\n\t * @see {@link https://discord.com/developers/docs/interactions/application-commands#bulk-overwrite-global-application-commands}\n\t * @param applicationId - The application id to overwrite commands for\n\t * @param body - The data to use when overwriting commands\n\t * @param options - The options for overwriting commands\n\t */\n\tpublic async bulkOverwriteGlobalCommands(\n\t\tapplicationId: Snowflake,\n\t\tbody: RESTPutAPIApplicationCommandsJSONBody,\n\t\t{ signal }: Pick<RequestData, 'signal'> = {},\n\t) {\n\t\treturn this.rest.put(Routes.applicationCommands(applicationId), {\n\t\t\tbody,\n\t\t\tsignal,\n\t\t}) as Promise<RESTPutAPIApplicationCommandsResult>;\n\t}\n\n\t/**\n\t * Fetches all commands for a guild\n\t *\n\t * @see {@link https://discord.com/developers/docs/interactions/application-commands#get-guild-application-commands}\n\t * @param applicationId - The application id to fetch commands for\n\t * @param guildId - The guild id to fetch commands for\n\t * @param query - The data to use when fetching commands\n\t * @param options - The options to use when fetching commands\n\t */\n\tpublic async getGuildCommands(\n\t\tapplicationId: Snowflake,\n\t\tguildId: Snowflake,\n\t\tquery: RESTGetAPIApplicationGuildCommandsQuery = {},\n\t\t{ signal }: Pick<RequestData, 'signal'> = {},\n\t) {\n\t\treturn this.rest.get(Routes.applicationGuildCommands(applicationId, guildId), {\n\t\t\tquery: makeURLSearchParams(query),\n\t\t\tsignal,\n\t\t}) as Promise<RESTGetAPIApplicationCommandsResult>;\n\t}\n\n\t/**\n\t * Creates a new command for a guild\n\t *\n\t * @see {@link https://discord.com/developers/docs/interactions/application-commands#create-guild-application-command}\n\t * @param applicationId - The application id to create the command for\n\t * @param guildId - The guild id to create the command for\n\t * @param body - The data to use when creating the command\n\t * @param options - The options to use when creating the command\n\t */\n\tpublic async createGuildCommand(\n\t\tapplicationId: Snowflake,\n\t\tguildId: Snowflake,\n\t\tbody: RESTPostAPIApplicationCommandsJSONBody,\n\t\t{ signal }: Pick<RequestData, 'signal'> = {},\n\t) {\n\t\treturn this.rest.post(Routes.applicationGuildCommands(applicationId, guildId), {\n\t\t\tbody,\n\t\t\tsignal,\n\t\t}) as Promise<RESTPostAPIApplicationCommandsResult>;\n\t}\n\n\t/**\n\t * Fetches a guild command\n\t *\n\t * @see {@link https://discord.com/developers/docs/interactions/application-commands#get-guild-application-command}\n\t * @param applicationId - The application id to fetch the command from\n\t * @param guildId - The guild id to fetch the command from\n\t * @param commandId - The command id to fetch\n\t * @param options - The options to use when fetching the command\n\t */\n\tpublic async getGuildCommand(\n\t\tapplicationId: Snowflake,\n\t\tguildId: Snowflake,\n\t\tcommandId: Snowflake,\n\t\t{ signal }: Pick<RequestData, 'signal'> = {},\n\t) {\n\t\treturn this.rest.get(Routes.applicationGuildCommand(applicationId, guildId, commandId), {\n\t\t\tsignal,\n\t\t}) as Promise<RESTGetAPIApplicationCommandResult>;\n\t}\n\n\t/**\n\t * Edits a guild command\n\t *\n\t * @see {@link https://discord.com/developers/docs/interactions/application-commands#edit-guild-application-command}\n\t * @param applicationId - The application id of the command\n\t * @param guildId - The guild id of the command\n\t * @param commandId - The command id to edit\n\t * @param body - The data to use when editing the command\n\t * @param options - The options to use when editing the command\n\t */\n\tpublic async editGuildCommand(\n\t\tapplicationId: Snowflake,\n\t\tguildId: Snowflake,\n\t\tcommandId: Snowflake,\n\t\tbody: RESTPatchAPIApplicationCommandJSONBody,\n\t\t{ signal }: Pick<RequestData, 'signal'> = {},\n\t) {\n\t\treturn this.rest.patch(Routes.applicationGuildCommand(applicationId, guildId, commandId), {\n\t\t\tbody,\n\t\t\tsignal,\n\t\t}) as Promise<RESTPatchAPIApplicationCommandResult>;\n\t}\n\n\t/**\n\t * Deletes a guild command\n\t *\n\t * @see {@link https://discord.com/developers/docs/interactions/application-commands#delete-guild-application-command}\n\t * @param applicationId - The application id of the command\n\t * @param guildId - The guild id of the command\n\t * @param commandId - The id of the command to delete\n\t * @param options - The options for deleting the command\n\t */\n\tpublic async deleteGuildCommand(\n\t\tapplicationId: Snowflake,\n\t\tguildId: Snowflake,\n\t\tcommandId: Snowflake,\n\t\t{ signal }: Pick<RequestData, 'signal'> = {},\n\t) {\n\t\tawait this.rest.delete(Routes.applicationGuildCommand(applicationId, guildId, commandId), { signal });\n\t}\n\n\t/**\n\t * Bulk overwrites guild commands\n\t *\n\t * @see {@link https://discord.com/developers/docs/interactions/application-commands#bulk-overwrite-guild-application-commands}\n\t * @param applicationId - The application id to overwrite commands for\n\t * @param guildId - The guild id to overwrite commands for\n\t * @param body - The data to use when overwriting commands\n\t * @param options - The options to use when overwriting the commands\n\t */\n\tpublic async bulkOverwriteGuildCommands(\n\t\tapplicationId: Snowflake,\n\t\tguildId: Snowflake,\n\t\tbody: RESTPutAPIApplicationCommandsJSONBody,\n\t\t{ signal }: Pick<RequestData, 'signal'> = {},\n\t) {\n\t\treturn this.rest.put(Routes.applicationGuildCommands(applicationId, guildId), {\n\t\t\tbody,\n\t\t\tsignal,\n\t\t}) as Promise<RESTPutAPIApplicationCommandsResult>;\n\t}\n\n\t/**\n\t * Fetches the permissions for a guild command\n\t *\n\t * @see {@link https://discord.com/developers/docs/interactions/application-commands#get-guild-application-command-permissions}\n\t * @param applicationId - The application id to get the permissions for\n\t * @param guildId - The guild id of the command\n\t * @param commandId - The command id to get the permissions for\n\t * @param options - The option for fetching the command\n\t */\n\tpublic async getGuildCommandPermissions(\n\t\tapplicationId: Snowflake,\n\t\tguildId: Snowflake,\n\t\tcommandId: Snowflake,\n\t\t{ signal }: Pick<RequestData, 'signal'> = {},\n\t) {\n\t\treturn this.rest.get(Routes.applicationCommandPermissions(applicationId, guildId, commandId), {\n\t\t\tsignal,\n\t\t}) as Promise<RESTGetAPIApplicationCommandPermissionsResult>;\n\t}\n\n\t/**\n\t * Fetches all permissions for all commands in a guild\n\t *\n\t * @see {@link https://discord.com/developers/docs/interactions/application-commands#get-application-command-permissions}\n\t * @param applicationId - The application id to get the permissions for\n\t * @param guildId - The guild id to get the permissions for\n\t * @param options - The options for fetching permissions\n\t */\n\tpublic async getGuildCommandsPermissions(\n\t\tapplicationId: Snowflake,\n\t\tguildId: Snowflake,\n\t\t{ signal }: Pick<RequestData, 'signal'> = {},\n\t) {\n\t\treturn this.rest.get(Routes.guildApplicationCommandsPermissions(applicationId, guildId), {\n\t\t\tsignal,\n\t\t}) as Promise<RESTGetAPIGuildApplicationCommandsPermissionsResult>;\n\t}\n\n\t/**\n\t * Edits the permissions for a guild command\n\t *\n\t * @see {@link https://discord.com/developers/docs/interactions/application-commands#edit-application-command-permissions}\n\t * @param userToken - The token of the user to edit permissions on behalf of\n\t * @param applicationId - The application id to edit the permissions for\n\t * @param guildId - The guild id to edit the permissions for\n\t * @param commandId - The id of the command to edit the permissions for\n\t * @param body - The data to use when editing the permissions\n\t * @param options - The options to use when editing the permissions\n\t */\n\tpublic async editGuildCommandPermissions(\n\t\tuserToken: string,\n\t\tapplicationId: Snowflake,\n\t\tguildId: Snowflake,\n\t\tcommandId: Snowflake,\n\t\tbody: RESTPutAPIApplicationCommandPermissionsJSONBody,\n\t\t{ signal }: Pick<RequestData, 'signal'> = {},\n\t) {\n\t\treturn this.rest.put(Routes.applicationCommandPermissions(applicationId, guildId, commandId), {\n\t\t\theaders: { Authorization: `Bearer ${userToken.replace('Bearer ', '')}` },\n\t\t\tauth: false,\n\t\t\tbody,\n\t\t\tsignal,\n\t\t}) as Promise<RESTPutAPIApplicationCommandPermissionsResult>;\n\t}\n}\n","import { makeURLSearchParams, type RawFile, type REST, type RequestData } from '@discordjs/rest';\nimport {\n\tRoutes,\n\ttype RESTDeleteAPIChannelResult,\n\ttype RESTGetAPIChannelInvitesResult,\n\ttype RESTGetAPIChannelMessageReactionUsersQuery,\n\ttype RESTGetAPIChannelMessageReactionUsersResult,\n\ttype RESTGetAPIChannelMessageResult,\n\ttype RESTGetAPIChannelMessagesQuery,\n\ttype RESTGetAPIChannelMessagesResult,\n\ttype RESTGetAPIChannelPinsResult,\n\ttype RESTGetAPIChannelResult,\n\ttype RESTGetAPIChannelThreadsArchivedQuery,\n\ttype RESTGetAPIChannelUsersThreadsArchivedResult,\n\ttype RESTGetAPIChannelWebhooksResult,\n\ttype RESTPatchAPIChannelMessageJSONBody,\n\ttype RESTPatchAPIChannelJSONBody,\n\ttype RESTPatchAPIChannelMessageResult,\n\ttype RESTPatchAPIChannelResult,\n\ttype RESTPostAPIChannelFollowersResult,\n\ttype RESTPostAPIChannelInviteJSONBody,\n\ttype RESTPostAPIChannelInviteResult,\n\ttype RESTPostAPIChannelMessageCrosspostResult,\n\ttype RESTPostAPIChannelMessageJSONBody,\n\ttype RESTPostAPIChannelMessageResult,\n\ttype Snowflake,\n} from 'discord-api-types/v10';\n\nexport class ChannelsAPI {\n\tpublic constructor(private readonly rest: REST) {}\n\n\t/**\n\t * Sends a message in a channel\n\t *\n\t * @see {@link https://discord.com/developers/docs/resources/channel#create-message}\n\t * @param channelId - The id of the channel to send the message in\n\t * @param body - The data to use when sending the message\n\t * @param options - The options to use when sending the message\n\t */\n\tpublic async createMessage(\n\t\tchannelId: Snowflake,\n\t\t{ files, ...body }: RESTPostAPIChannelMessageJSONBody & { files?: RawFile[] },\n\t\t{ signal }: Pick<RequestData, 'signal'> = {},\n\t) {\n\t\treturn this.rest.post(Routes.channelMessages(channelId), {\n\t\t\tfiles,\n\t\t\tbody,\n\t\t\tsignal,\n\t\t}) as Promise<RESTPostAPIChannelMessageResult>;\n\t}\n\n\t/**\n\t * Edits a message\n\t *\n\t * @see {@link https://discord.com/developers/docs/resources/channel#edit-message}\n\t * @param channelId - The id of the channel the message is in\n\t * @param messageId - The id of the message to edit\n\t * @param body - The data to use when editing the message\n\t * @param options - The options to use when editing the message\n\t */\n\tpublic async editMessage(\n\t\tchannelId: Snowflake,\n\t\tmessageId: Snowflake,\n\t\t{ files, ...body }: RESTPatchAPIChannelMessageJSONBody & { files?: RawFile[] },\n\t\t{ signal }: Pick<RequestData, 'signal'> = {},\n\t) {\n\t\treturn this.rest.patch(Routes.channelMessage(channelId, messageId), {\n\t\t\tfiles,\n\t\t\tbody,\n\t\t\tsignal,\n\t\t}) as Promise<RESTPatchAPIChannelMessageResult>;\n\t}\n\n\t/**\n\t * Fetches the reactions for a message\n\t *\n\t * @see {@link https://discord.com/developers/docs/resources/channel#get-reactions}\n\t * @param channelId - The id of the channel the message is in\n\t * @param messageId - The id of the message to get the reactions for\n\t * @param emoji - The emoji to get the reactions for\n\t * @param query - The query options to use when fetching the reactions\n\t * @param options - The options for fetching the message reactions\n\t */\n\tpublic async getMessageReactions(\n\t\tchannelId: Snowflake,\n\t\tmessageId: Snowflake,\n\t\temoji: string,\n\t\tquery: RESTGetAPIChannelMessageReactionUsersQuery = {},\n\t\t{ signal }: Pick<RequestData, 'signal'> = {},\n\t) {\n\t\treturn this.rest.get(Routes.channelMessageReaction(channelId, messageId, encodeURIComponent(emoji)), {\n\t\t\tquery: makeURLSearchParams(query),\n\t\t\tsignal,\n\t\t}) as Promise<RESTGetAPIChannelMessageReactionUsersResult>;\n\t}\n\n\t/**\n\t * Deletes a reaction for the current user\n\t *\n\t * @see {@link https://discord.com/developers/docs/resources/channel#delete-own-reaction}\n\t * @param channelId - The id of the channel the message is in\n\t * @param messageId - The id of the message to delete the reaction for\n\t * @param emoji - The emoji to delete the reaction for\n\t * @param options - The options for deleting the reaction\n\t */\n\tpublic async deleteOwnMessageReaction(\n\t\tchannelId: Snowflake,\n\t\tmessageId: Snowflake,\n\t\temoji: string,\n\t\t{ signal }: Pick<RequestData, 'signal'> = {},\n\t) {\n\t\tawait this.rest.delete(Routes.channelMessageOwnReaction(channelId, messageId, encodeURIComponent(emoji)), {\n\t\t\tsignal,\n\t\t});\n\t}\n\n\t/**\n\t * Deletes a reaction for a user\n\t *\n\t * @see {@link https://discord.com/developers/docs/resources/channel#delete-user-reaction}\n\t * @param channelId - The id of the channel the message is in\n\t * @param messageId - The id of the message to delete the reaction for\n\t * @param emoji - The emoji to delete the reaction for\n\t * @param userId - The id of the user to delete the reaction for\n\t * @param options - The options for deleting the reaction\n\t */\n\tpublic async deleteUserMessageReaction(\n\t\tchannelId: Snowflake,\n\t\tmessageId: Snowflake,\n\t\temoji: string,\n\t\tuserId: Snowflake,\n\t\t{ signal }: Pick<RequestData, 'signal'> = {},\n\t) {\n\t\tawait this.rest.delete(Routes.channelMessageUserReaction(channelId, messageId, encodeURIComponent(emoji), userId), {\n\t\t\tsignal,\n\t\t});\n\t}\n\n\t/**\n\t * Deletes all reactions for a message\n\t *\n\t * @see {@link https://discord.com/developers/docs/resources/channel#delete-all-reactions}\n\t * @param channelId - The id of the channel the message is in\n\t * @param messageId - The id of the message to delete the reactions for\n\t * @param options - The options for deleting the reactions\n\t */\n\tpublic async deleteAllMessageReactions(\n\t\tchannelId: Snowflake,\n\t\tmessageId: Snowflake,\n\t\t{ signal }: Pick<RequestData, 'signal'> = {},\n\t) {\n\t\tawait this.rest.delete(Routes.channelMessageAllReactions(channelId, messageId), { signal });\n\t}\n\n\t/**\n\t * Deletes all reactions of an emoji for a message\n\t *\n\t * @see {@link https://discord.com/developers/docs/resources/channel#delete-all-reactions-for-emoji}\n\t * @param channelId - The id of the channel the message is in\n\t * @param messageId - The id of the message to delete the reactions for\n\t * @param emoji - The emoji to delete the reactions for\n\t * @param options - The options for deleting the reactions\n\t */\n\tpublic async deleteAllMessageReactionsForEmoji(\n\t\tchannelId: Snowflake,\n\t\tmessageId: Snowflake,\n\t\temoji: string,\n\t\t{ signal }: Pick<RequestData, 'signal'> = {},\n\t) {\n\t\tawait this.rest.delete(Routes.channelMessageReaction(channelId, messageId, encodeURIComponent(emoji)), { signal });\n\t}\n\n\t/**\n\t * Adds a reaction to a message\n\t *\n\t * @see {@link https://discord.com/developers/docs/resources/channel#create-reaction}\n\t * @param channelId - The id of the channel the message is in\n\t * @param messageId - The id of the message to add the reaction to\n\t * @param emoji - The emoji to add the reaction with\n\t * @param options - The options for adding the reaction\n\t */\n\tpublic async addMessageReaction(\n\t\tchannelId: Snowflake,\n\t\tmessageId: Snowflake,\n\t\temoji: string,\n\t\t{ signal }: Pick<RequestData, 'signal'> = {},\n\t) {\n\t\tawait this.rest.put(Routes.channelMessageOwnReaction(channelId, messageId, encodeURIComponent(emoji)), { signal });\n\t}\n\n\t/**\n\t * Fetches a channel\n\t *\n\t * @see {@link https://discord.com/developers/docs/resources/channel#get-channel}\n\t * @param channelId - The id of the channel\n\t * @param options - The options for fetching the channel\n\t */\n\tpublic async get(channelId: Snowflake, { signal }: Pick<RequestData, 'signal'> = {}) {\n\t\treturn this.rest.get(Routes.channel(channelId), { signal }) as Promise<RESTGetAPIChannelResult>;\n\t}\n\n\t/**\n\t * Edits a channel\n\t *\n\t * @see {@link https://discord.com/developers/docs/resources/channel#modify-channel}\n\t * @param channelId - The id of the channel to edit\n\t * @param body - The new channel data\n\t * @param options - The options for editing the channel\n\t */\n\tpublic async edit(\n\t\tchannelId: Snowflake,\n\t\tbody: RESTPatchAPIChannelJSONBody,\n\t\t{ signal }: Pick<RequestData, 'signal'> = {},\n\t) {\n\t\treturn this.rest.patch(Routes.channel(channelId), { body, signal }) as Promise<RESTPatchAPIChannelResult>;\n\t}\n\n\t/**\n\t * Deletes a channel\n\t *\n\t * @see {@link https://discord.com/developers/docs/resources/channel#deleteclose-channel}\n\t * @param channelId - The id of the channel to delete\n\t * @param options - The options for deleting the channel\n\t */\n\tpublic async delete(channelId: Snowflake, { signal }: Pick<RequestData, 'signal'> = {}) {\n\t\treturn this.rest.delete(Routes.channel(channelId), { signal }) as Promise<RESTDeleteAPIChannelResult>;\n\t}\n\n\t/**\n\t * Fetches the messages of a channel\n\t *\n\t * @see {@link https://discord.com/developers/docs/resources/channel#get-channel-messages}\n\t * @param channelId - The id of the channel to fetch messages from\n\t * @param query - The query options to use when fetching messages\n\t * @param options - The options for fetching the messages\n\t */\n\tpublic async getMessages(\n\t\tchannelId: Snowflake,\n\t\tquery: RESTGetAPIChannelMessagesQuery = {},\n\t\t{ signal }: Pick<RequestData, 'signal'> = {},\n\t) {\n\t\treturn this.rest.get(Routes.channelMessages(channelId), {\n\t\t\tquery: makeURLSearchParams(query),\n\t\t\tsignal,\n\t\t}) as Promise<RESTGetAPIChannelMessagesResult>;\n\t}\n\n\t/**\n\t * Shows a typing indicator in a channel\n\t *\n\t * @see {@link https://discord.com/developers/docs/resources/channel#trigger-typing-indicator}\n\t * @param channelId - The id of the channel to show the typing indicator in\n\t * @param options - The options for showing the typing indicator\n\t */\n\tpublic async showTyping(channelId: Snowflake, { signal }: Pick<RequestData, 'signal'> = {}) {\n\t\tawait this.rest.post(Routes.channelTyping(channelId), { signal });\n\t}\n\n\t/**\n\t * Fetches the pinned messages of a channel\n\t *\n\t * @see {@link https://discord.com/developers/docs/resources/channel#get-pinned-messages}\n\t * @param channelId - The id of the channel to fetch pinned messages from\n\t * @param options - The options for fetching the pinned messages\n\t */\n\tpublic async getPins(channelId: Snowflake, { signal }: Pick<RequestData, 'signal'> = {}) {\n\t\treturn this.rest.get(Routes.channelPins(channelId), { signal }) as Promise<RESTGetAPIChannelPinsResult>;\n\t}\n\n\t/**\n\t * Pins a message in a channel\n\t *\n\t * @see {@link https://discord.com/developers/docs/resources/channel#pin-message}\n\t * @param channelId - The id of the channel to pin the message in\n\t * @param messageId - The id of the message to pin\n\t * @param options - The options for pinning the message\n\t */\n\tpublic async pinMessage(\n\t\tchannelId: Snowflake,\n\t\tmessageId: Snowflake,\n\t\t{ reason, signal }: Pick<RequestData, 'reason' | 'signal'> = {},\n\t) {\n\t\tawait this.rest.put(Routes.channelPin(channelId, messageId), { reason, signal });\n\t}\n\n\t/**\n\t * Deletes a message\n\t *\n\t * @see {@link https://discord.com/developers/docs/resources/channel#delete-message}\n\t * @param channelId - The id of the channel the message is in\n\t * @param messageId - The id of the message to delete\n\t * @param options - The options for deleting the message\n\t */\n\tpublic async deleteMessage(\n\t\tchannelId: Snowflake,\n\t\tmessageId: Snowflake,\n\t\t{ reason, signal }: Pick<RequestData, 'reason' | 'signal'> = {},\n\t) {\n\t\tawait this.rest.delete(Routes.channelMessage(channelId, messageId), { reason, signal });\n\t}\n\n\t/**\n\t * Bulk deletes messages\n\t *\n\t * @see {@link https://discord.com/developers/docs/resources/channel#bulk-delete-messages}\n\t * @param channelId - The id of the channel the messages are in\n\t * @param messageIds - The ids of the messages to delete\n\t * @param options - The options for deleting the messages\n\t */\n\tpublic async bulkDeleteMessages(\n\t\tchannelId: Snowflake,\n\t\tmessageIds: Snowflake[],\n\t\t{ reason, signal }: Pick<RequestData, 'reason' | 'signal'> = {},\n\t): Promise<void> {\n\t\tawait this.rest.post(Routes.channelBulkDelete(channelId), { reason, body: { messages: messageIds }, signal });\n\t}\n\n\t/**\n\t * Fetches a message\n\t *\n\t * @see {@link https://discord.com/developers/docs/resources/channel#get-channel-message}\n\t * @param channelId - The id of the channel the message is in\n\t * @param messageId - The id of the message to fetch\n\t * @param options - The options for fetching the message\n\t */\n\tpublic async getMessage(channelId: Snowflake, messageId: Snowflake, { signal }: Pick<RequestData, 'signal'> = {}) {\n\t\treturn this.rest.get(Routes.channelMessage(channelId, messageId), {\n\t\t\tsignal,\n\t\t}) as Promise<RESTGetAPIChannelMessageResult>;\n\t}\n\n\t/**\n\t * Crossposts a message\n\t *\n\t * @see {@link https://discord.com/developers/docs/resources/channel#crosspost-message}\n\t * @param channelId - The id of the channel the message is in\n\t * @param messageId - The id of the message to crosspost\n\t * @param options - The options for crossposting the message\n\t */\n\tpublic async crosspostMessage(\n\t\tchannelId: Snowflake,\n\t\tmessageId: Snowflake,\n\t\t{ signal }: Pick<RequestData, 'signal'> = {},\n\t) {\n\t\treturn this.rest.post(Routes.channelMessageCrosspost(channelId, messageId), {\n\t\t\tsignal,\n\t\t}) as Promise<RESTPostAPIChannelMessageCrosspostResult>;\n\t}\n\n\t/**\n\t * Unpins a message in a channel\n\t *\n\t * @see {@link https://discord.com/developers/docs/resources/channel#unpin-message}\n\t * @param channelId - The id of the channel to unpin the message in\n\t * @param messageId - The id of the message to unpin\n\t * @param options - The options for unpinning the message\n\t */\n\tpublic async unpinMessage(\n\t\tchannelId: Snowflake,\n\t\tmessageId: Snowflake,\n\t\t{ reason, signal }: Pick<RequestData, 'reason' | 'signal'> = {},\n\t) {\n\t\tawait this.rest.delete(Routes.channelPin(channelId, messageId), { reason, signal });\n\t}\n\n\t/**\n\t * Follows an announcement channel\n\t *\n\t * @see {@link https://discord.com/developers/docs/resources/channel#follow-announcement-channel}\n\t * @param channelId - The id of the announcement channel to follow\n\t * @param webhookChannelId - The id of the webhook channel to follow the announcements in\n\t * @param options - The options for following the announcement channel\n\t */\n\tpublic async followAnnouncements(\n\t\tchannelId: Snowflake,\n\t\twebhookChannelId: Snowflake,\n\t\t{ signal }: Pick<RequestData, 'signal'> = {},\n\t) {\n\t\treturn this.rest.post(Routes.channelFollowers(channelId), {\n\t\t\tbody: { webhook_channel_id: webhookChannelId },\n\t\t\tsignal,\n\t\t}) as Promise<RESTPostAPIChannelFollowersResult>;\n\t}\n\n\t/**\n\t * Creates a new invite for a channel\n\t *\n\t * @see {@link https://discord.com/developers/docs/resources/channel#create-channel-invite}\n\t * @param channelId - The id of the channel to create an invite for\n\t * @param body - The data to use when creating the invite\n\t * @param options - The options for creating the invite\n\t */\n\tpublic async createInvite(\n\t\tchannelId: Snowflake,\n\t\tbody: RESTPostAPIChannelInviteJSONBody,\n\t\t{ reason, signal }: Pick<RequestData, 'reason' | 'signal'> = {},\n\t) {\n\t\treturn this.rest.post(Routes.channelInvites(channelId), {\n\t\t\treason,\n\t\t\tbody,\n\t\t\tsignal,\n\t\t}) as Promise<RESTPostAPIChannelInviteResult>;\n\t}\n\n\t/**\n\t * Fetches the invites of a channel\n\t *\n\t * @see {@link https://discord.com/developers/docs/resources/channel#get-channel-invites}\n\t * @param channelId - The id of the channel to fetch invites from\n\t * @param options - The options for fetching the invites\n\t */\n\tpublic async getInvites(channelId: Snowflake, { signal }: Pick<RequestData, 'signal'> = {}) {\n\t\treturn this.rest.get(Routes.channelInvites(channelId), { signal }) as Promise<RESTGetAPIChannelInvitesResult>;\n\t}\n\n\t/**\n\t * Fetches the archived threads of a channel\n\t *\n\t * @see {@link https://discord.com/developers/docs/resources/channel#list-public-archived-threads}\n\t * @see {@link https://discord.com/developers/docs/resources/channel#list-private-archived-threads}\n\t * @param channelId - The id of the channel to fetch archived threads from\n\t * @param archivedStatus - The archived status of the threads to fetch\n\t * @param query - The options to use when fetching archived threads\n\t * @param options - The options for fetching archived threads\n\t */\n\tpublic async getArchivedThreads(\n\t\tchannelId: Snowflake,\n\t\tarchivedStatus: 'private' | 'public',\n\t\tquery: RESTGetAPIChannelThreadsArchivedQuery = {},\n\t\t{ signal }: Pick<RequestData, 'signal'> = {},\n\t) {\n\t\treturn this.rest.get(Routes.channelThreads(channelId, archivedStatus), {\n\t\t\tquery: makeURLSearchParams(query),\n\t\t\tsignal,\n\t\t}) as Promise<RESTGetAPIChannelUsersThreadsArchivedResult>;\n\t}\n\n\t/**\n\t * Fetches the private joined archived threads of a channel\n\t *\n\t * @see {@link https://discord.com/developers/docs/resources/channel#list-joined-private-archived-threads}\n\t * @param channelId - The id of the channel to fetch joined archived threads from\n\t * @param query - The options to use when fetching joined archived threads\n\t * @param options - The options for fetching joined archived threads\n\t */\n\tpublic async getJoinedPrivateArchivedThreads(\n\t\tchannelId: Snowflake,\n\t\tquery: RESTGetAPIChannelThreadsArchivedQuery = {},\n\t\t{ signal }: Pick<RequestData, 'signal'> = {},\n\t) {\n\t\treturn this.rest.get(Routes.channelJoinedArchivedThreads(channelId), {\n\t\t\tquery: makeURLSearchParams(query),\n\t\t\tsignal,\n\t\t}) as Promise<RESTGetAPIChannelUsersThreadsArchivedResult>;\n\t}\n\n\t/**\n\t * Fetches the webhooks of a channel\n\t *\n\t * @see {@link https://discord.com/developers/docs/resources/webhook#get-channel-webhooks}\n\t * @param id - The id of the channel\n\t */\n\tpublic async getWebhooks(id: Snowflake) {\n\t\treturn this.rest.get(Routes.channelWebhooks(id)) as Promise<RESTGetAPIChannelWebhooksResult>;\n\t}\n}\n","import { makeURLSearchParams, type REST, type RawFile, type RequestData } from '@discordjs/rest';\nimport { Routes } from 'discord-api-types/v10';\nimport type {\n\tRESTPatchAPIGuildVoiceStateCurrentMemberJSONBody,\n\tRESTPatchAPIGuildVoiceStateCurrentMemberResult,\n\tGuildMFALevel,\n\tGuildWidgetStyle,\n\tRESTGetAPIAuditLogQuery,\n\tRESTGetAPIAuditLogResult,\n\tRESTGetAPIAutoModerationRuleResult,\n\tRESTGetAPIAutoModerationRulesResult,\n\tRESTGetAPIGuildBansResult,\n\tRESTGetAPIGuildChannelsResult,\n\tRESTGetAPIGuildEmojiResult,\n\tRESTGetAPIGuildEmojisResult,\n\tRESTGetAPIGuildIntegrationsResult,\n\tRESTGetAPIGuildInvitesResult,\n\tRESTGetAPIGuildMemberResult,\n\tRESTGetAPIGuildMembersResult,\n\tRESTGetAPIGuildMembersQuery,\n\tRESTGetAPIGuildMembersSearchResult,\n\tRESTGetAPIGuildPreviewResult,\n\tRESTGetAPIGuildPruneCountResult,\n\tRESTGetAPIGuildResult,\n\tRESTGetAPIGuildRolesResult,\n\tRESTGetAPIGuildScheduledEventQuery,\n\tRESTGetAPIGuildScheduledEventResult,\n\tRESTGetAPIGuildScheduledEventsQuery,\n\tRESTGetAPIGuildScheduledEventsResult,\n\tRESTGetAPIGuildScheduledEventUsersQuery,\n\tRESTGetAPIGuildScheduledEventUsersResult,\n\tRESTGetAPIGuildStickerResult,\n\tRESTGetAPIGuildStickersResult,\n\tRESTGetAPIGuildTemplatesResult,\n\tRESTGetAPIGuildThreadsResult,\n\tRESTGetAPIGuildVanityUrlResult,\n\tRESTGetAPIGuildVoiceRegionsResult,\n\tRESTGetAPIGuildPruneCountQuery,\n\tRESTPostAPIGuildStickerFormDataBody,\n\tRESTPostAPIGuildStickerResult,\n\tRESTGetAPIGuildMembersSearchQuery,\n\tRESTGetAPIGuildWebhooksResult,\n\tRESTGetAPIGuildWelcomeScreenResult,\n\tRESTGetAPIGuildWidgetImageResult,\n\tRESTGetAPIGuildWidgetJSONResult,\n\tRESTGetAPITemplateResult,\n\tRESTPatchAPIAutoModerationRuleJSONBody,\n\tRESTPatchAPIGuildChannelPositionsJSONBody,\n\tRESTPatchAPIGuildEmojiJSONBody,\n\tRESTPatchAPIGuildEmojiResult,\n\tRESTPatchAPIGuildJSONBody,\n\tRESTPatchAPIGuildMemberJSONBody,\n\tRESTPatchAPIGuildMemberResult,\n\tRESTPatchAPIGuildResult,\n\tRESTPatchAPIGuildRoleJSONBody,\n\tRESTPatchAPIGuildRolePositionsJSONBody,\n\tRESTPatchAPIGuildRolePositionsResult,\n\tRESTPatchAPIGuildRoleResult,\n\tRESTPatchAPIGuildScheduledEventJSONBody,\n\tRESTPatchAPIGuildScheduledEventResult,\n\tRESTPatchAPIGuildStickerJSONBody,\n\tRESTPatchAPIGuildStickerResult,\n\tRESTPatchAPIGuildTemplateJSONBody,\n\tRESTPatchAPIGuildTemplateResult,\n\tRESTPatchAPIGuildVoiceStateUserJSONBody,\n\tRESTPatchAPIGuildWelcomeScreenJSONBody,\n\tRESTPatchAPIGuildWelcomeScreenResult,\n\tRESTPatchAPIGuildWidgetSettingsJSONBody,\n\tRESTPatchAPIGuildWidgetSettingsResult,\n\tRESTPostAPIAutoModerationRuleJSONBody,\n\tRESTPostAPIAutoModerationRuleResult,\n\tRESTPostAPIGuildChannelJSONBody,\n\tRESTPostAPIGuildChannelResult,\n\tRESTPostAPIGuildEmojiJSONBody,\n\tRESTPostAPIGuildEmojiResult,\n\tRESTPostAPIGuildPruneJSONBody,\n\tRESTPostAPIGuildRoleJSONBody,\n\tRESTPostAPIGuildRoleResult,\n\tRESTPostAPIGuildScheduledEventJSONBody,\n\tRESTPostAPIGuildScheduledEventResult,\n\tRESTPostAPIGuildsJSONBody,\n\tRESTPostAPIGuildsMFAResult,\n\tRESTPostAPIGuildsResult,\n\tRESTPostAPIGuildTemplatesResult,\n\tRESTPostAPITemplateCreateGuildJSONBody,\n\tRESTPutAPIGuildBanJSONBody,\n\tRESTPutAPIGuildTemplateSyncResult,\n\tSnowflake,\n} from 'discord-api-types/v10';\n\nexport class GuildsAPI {\n\tpublic constructor(private readonly rest: REST) {}\n\n\t/**\n\t * Fetches a guild\n\t *\n\t * @see {@link https://discord.com/developers/docs/resources/guild#get-guild}\n\t * @param guildId - The id of the guild\n\t * @param options - The options for fetching the guild\n\t */\n\tpublic async get(guildId: string, { signal }: Pick<RequestData, 'signal'> = {}) {\n\t\treturn this.rest.get(Routes.guild(guildId), { signal }) as Promise<RESTGetAPIGuildResult>;\n\t}\n\n\t/**\n\t * Fetches a guild preview\n\t *\n\t * @see {@link https://discord.com/developers/docs/resources/guild#get-guild-preview}\n\t * @param guildId - The id of the guild to fetch the preview from\n\t * @param options - The options for fetching the guild preview\n\t */\n\tpublic async getPreview(guildId: Snowflake, { signal }: Pick<RequestData, 'signal'> = {}) {\n\t\treturn this.rest.get(Routes.guildPreview(guildId), {\n\t\t\tsignal,\n\t\t}) as Promise<RESTGetAPIGuildPreviewResult>;\n\t}\n\n\t/**\n\t * Creates a guild\n\t *\n\t * @see {@link https://discord.com/developers/docs/resources/guild#create-guild}\n\t * @param body - The guild to create\n\t * @param options - The options for creating the guild\n\t */\n\tpublic async create(body: RESTPostAPIGuildsJSONBody, { signal }: Pick<RequestData, 'signal'> = {}) {\n\t\treturn this.rest.post(Routes.guilds(), { body, signal }) as Promise<RESTPostAPIGuildsResult>;\n\t}\n\n\t/**\n\t * Edits a guild\n\t *\n\t * @see {@link https://discord.com/developers/docs/resources/guild#modify-guild}\n\t * @param guildId - The id of the guild to edit\n\t * @param body - The new guild data\n\t * @param options - The options for editing the guild\n\t */\n\tpublic async edit(\n\t\tguildId: Snowflake,\n\t\tbody: RESTPatchAPIGuildJSONBody,\n\t\t{ reason, signal }: Pick<RequestData, 'reason' | 'signal'> = {},\n\t) {\n\t\treturn this.rest.patch(Routes.guild(guildId), {\n\t\t\treason,\n\t\t\tbody,\n\t\t\tsignal,\n\t\t}) as Promise<RESTPatchAPIGuildResult>;\n\t}\n\n\t/**\n\t * Deletes a guild\n\t *\n\t * @see {@link https://discord.com/developers/docs/resources/guild#delete-guild}\n\t * @param guildId - The id of the guild to delete\n\t * @param options - The options for deleting this guild\n\t */\n\tpublic async delete(guildId: Snowflake, { signal, reason }: Pick<RequestData, 'reason' | 'signal'> = {}) {\n\t\tawait this.rest.delete(Routes.guild(guildId), { reason, signal });\n\t}\n\n\t/**\n\t * Fetches all the members of a guild\n\t *\n\t * @see {@link https://discord.com/developers/docs/resources/guild#list-guild-members}\n\t * @param guildId - The id of the guild\n\t * @param query - The query to use when fetching the guild members\n\t * @param options - The options for fetching the guild members\n\t */\n\tpublic async getMembers(\n\t\tguildId: Snowflake,\n\t\tquery: RESTGetAPIGuildMembersQuery = {},\n\t\t{ signal }: Pick<RequestData, 'signal'> = {},\n\t) {\n\t\treturn this.rest.get(Routes.guildMembers(guildId), {\n\t\t\tquery: makeURLSearchParams(query),\n\t\t\tsignal,\n\t\t}) as Promise<RESTGetAPIGuildMembersResult>;\n\t}\n\n\t/**\n\t * Fetches a guild's channels\n\t *\n\t * @see {@link https://discord.com/developers/docs/resources/guild#get-guild-channels}\n\t * @param guildId - The id of the guild to fetch the channels from\n\t * @param options - The options for fetching the guild channels\n\t */\n\tpublic async getChannels(guildId: Snowflake, { signal }: Pick<RequestData, 'signal'> = {}) {\n\t\treturn this.rest.get(Routes.guildChannels(guildId), {\n\t\t\tsignal,\n\t\t}) as Promise<RESTGetAPIGuildChannelsResult>;\n\t}\n\n\t/**\n\t * Creates a guild channel\n\t *\n\t * @see {@link https://discord.com/developers/docs/resources/guild#create-guild-channel}\n\t * @param guildId - The id of the guild to create the channel in\n\t * @param body - The data to create the new channel\n\t * @param options - The options for creating the guild channel\n\t */\n\tpublic async createChannel(\n\t\tguildId: Snowflake,\n\t\tbody: RESTPostAPIGuildChannelJSONBody,\n\t\t{ reason, signal }: Pick<RequestData, 'reason' | 'signal'> = {},\n\t) {\n\t\treturn this.rest.post(Routes.guildChannels(guildId), {\n\t\t\treason,\n\t\t\tbody,\n\t\t\tsignal,\n\t\t}) as Promise<RESTPostAPIGuildChannelResult>;\n\t}\n\n\t/**\n\t * Edits a guild channel's positions\n\t *\n\t * @see {@link https://discord.com/developers/docs/resources/guild#modify-guild-channel-positions}\n\t * @param guildId - The id of the guild to edit the channel positions from\n\t * @param body - The data to edit the channel positions with\n\t * @param options - The options for editing the guild channel positions\n\t */\n\tpublic async setChannelPositions(\n\t\tguildId: Snowflake,\n\t\tbody: RESTPatchAPIGuildChannelPositionsJSONBody,\n\t\t{ reason, signal }: Pick<RequestData, 'reason' | 'signal'> = {},\n\t) {\n\t\tawait this.rest.patch(Routes.guildChannels(guildId), { reason, body, signal });\n\t}\n\n\t/**\n\t * Fetches the active threads in a guild\n\t *\n\t * @see {@link https://discord.com/developers/docs/resources/guild#list-active-guild-threads}\n\t * @param guildId - The id of the guild to fetch the active threads from\n\t * @param options - The options for fetching the active threads\n\t */\n\tpublic async getActiveThreads(guildId: Snowflake, { signal }: Pick<RequestData, 'signal'> = {}) {\n\t\treturn this.rest.get(Routes.guildActiveThreads(guildId), { signal }) as Promise<RESTGetAPIGuildThreadsResult>;\n\t}\n\n\t/**\n\t * Fetches a guild member ban\n\t *\n\t * @see {@link https://discord.com/developers/docs/resources/guild#get-guild-bans}\n\t * @param guildId - The id of the guild to fetch the ban from\n\t * @param options - The options for fetching the guild member ban\n\t */\n\tpublic async getMemberBans(guildId: Snowflake, { signal }: Pick<RequestData, 'signal'> = {}) {\n\t\treturn this.rest.get(Routes.guildBans(guildId), { signal }) as Promise<RESTGetAPIGuildBansResult>;\n\t}\n\n\t/**\n\t * Bans a user from a guild\n\t *\n\t * @see {@link https://discord.com/developers/docs/resources/guild#create-guild-ban}\n\t * @param guildId - The id of the guild to ban the member in\n\t * @param userId - The id of the user to ban\n\t * @param body - The payload for banning the user\n\t * @param options - The options for banning the user\n\t */\n\tpublic async banUser(\n\t\tguildId: Snowflake,\n\t\tuserId: Snowflake,\n\t\tbody: RESTPutAPIGuildBanJSONBody = {},\n\t\t{ reason, signal }: Pick<RequestData, 'reason' | 'signal'> = {},\n\t) {\n\t\tawait this.rest.put(Routes.guildBan(guildId, userId), { reason, body, signal });\n\t}\n\n\t/**\n\t * Unbans a user from a guild\n\t *\n\t * @see {@link https://discord.com/developers/docs/resources/guild#remove-guild-ban}\n\t * @param guildId - The id of the guild to unban the member in\n\t * @param userId - The id of the user to unban\n\t * @param options - The options for unbanning the user\n\t */\n\tpublic async unbanUser(\n\t\tguildId: Snowflake,\n\t\tuserId: Snowflake,\n\t\t{ reason, signal }: Pick<RequestData, 'reason' | 'signal'> = {},\n\t) {\n\t\tawait this.rest.delete(Routes.guildBan(guildId, userId), { reason, signal });\n\t}\n\n\t/**\n\t * Gets all the roles in a guild\n\t *\n\t * @see {@link https://discord.com/developers/docs/resources/guild#get-guild-roles}\n\t * @param guildId - The id of the guild to fetch the roles from\n\t * @param options - The options for fetching the guild roles\n\t */\n\tpublic async getRoles(guildId: Snowflake, { signal }: Pick<RequestData, 'signal'> = {}) {\n\t\treturn this.rest.get(Routes.guildRoles(guildId), { signal }) as Promise<RESTGetAPIGuildRolesResult>;\n\t}\n\n\t/**\n\t * Creates a guild role\n\t *\n\t * @see {@link https://discord.com/developers/docs/resources/guild#create-guild-role}\n\t * @param guildId - The id of the guild to create the role in\n\t * @param body - The data to create the role with\n\t * @param options - The options for creating the guild role\n\t */\n\tpublic async createRole(\n\t\tguildId: Snowflake,\n\t\tbody: RESTPostAPIGuildRoleJSONBody,\n\t\t{ reason, signal }: Pick<RequestData, 'reason' | 'signal'> = {},\n\t) {\n\t\treturn this.rest.post(Routes.guildRoles(guildId), { reason, body, signal }) as Promise<RESTPostAPIGuildRoleResult>;\n\t}\n\n\t/**\n\t * Sets role positions in a guild\n\t *\n\t * @see {@link https://discord.com/developers/docs/resources/guild#modify-guild-role-positions}\n\t * @param guildId - The id of the guild to set role positions for\n\t * @param body - The data for setting a role position\n\t * @param options - The options for setting role positions\n\t */\n\tpublic async setRolePositions(\n\t\tguildId: Snowflake,\n\t\tbody: RESTPatchAPIGuildRolePositionsJSONBody,\n\t\t{ reason, signal }: Pick<RequestData, 'reason' | 'signal'> = {},\n\t) {\n\t\treturn this.rest.patch(Routes.guildRoles(guildId), {\n\t\t\treason,\n\t\t\tbody,\n\t\t\tsignal,\n\t\t}) as Promise<RESTPatchAPIGuildRolePositionsResult>;\n\t}\n\n\t/**\n\t * Edits a guild role\n\t *\n\t * @see {@link https://discord.com/developers/docs/resources/guild#modify-guild-role}\n\t * @param guildId - The id of the guild to edit the role in\n\t * @param roleId - The id of the role to edit\n\t * @param body - data for editing the role\n\t * @param options - The options for editing the guild role\n\t */\n\tpublic async editRole(\n\t\tguildId: Snowflake,\n\t\troleId: Snowflake,\n\t\tbody: RESTPatchAPIGuildRoleJSONBody,\n\t\t{ reason, signal }: Pick<RequestData, 'reason' | 'signal'> = {},\n\t) {\n\t\treturn this.rest.patch(Routes.guildRole(guildId, roleId), {\n\t\t\treason,\n\t\t\tbody,\n\t\t\tsignal,\n\t\t}) as Promise<RESTPatchAPIGuildRoleResult>;\n\t}\n\n\t/**\n\t * Deletes a guild role\n\t *\n\t * @see {@link https://discord.com/developers/docs/resources/guild#delete-guild-role}\n\t * @param guildId - The id of the guild to delete the role in\n\t * @param roleId - The id of the role to delete\n\t * @param options - The options for deleting the guild role\n\t */\n\tpublic async deleteRole(\n\t\tguildId: Snowflake,\n\t\troleId: Snowflake,\n\t\t{ reason, signal }: Pick<RequestData, 'reason' | 'signal'> = {},\n\t) {\n\t\tawait this.rest.delete(Routes.guildRole(guildId, roleId), { reason, signal });\n\t}\n\n\t/**\n\t * Edits the multi-factor-authentication (MFA) level of a guild\n\t *\n\t * @see {@link https://discord.com/developers/docs/resources/guild#modify-guild-mfa-level}\n\t * @param guildId - The id of the guild to edit the MFA level for\n\t * @param level - The new MFA level\n\t * @param options - The options for editing the MFA level\n\t */\n\tpublic async editMFALevel(\n\t\tguildId: Snowflake,\n\t\tlevel: GuildMFALevel,\n\t\t{ reason, signal }: Pick<RequestData, 'reason' | 'signal'> = {},\n\t) {\n\t\treturn this.rest.post(Routes.guildMFA(guildId), {\n\t\t\treason,\n\t\t\tsignal,\n\t\t\tbody: { mfa_level: level },\n\t\t}) as Promise<RESTPostAPIGuildsMFAResult>;\n\t}\n\n\t/**\n\t * Fetch the number of members that can be pruned from a guild\n\t *\n\t * @see {@link https://discord.com/developers/docs/resources/guild#get-guild-prune-count}\n\t * @param guildId - The id of the guild to fetch the number of pruned members from\n\t * @param query - The query options for fetching the number of pruned members\n\t * @param options - The options for fetching the number of pruned members\n\t */\n\tpublic async getPruneCount(\n\t\tguildId: Snowflake,\n\t\tquery: RESTGetAPIGuildPruneCountQuery = {},\n\t\t{ signal }: Pick<RequestData, 'signal'> = {},\n\t) {\n\t\treturn this.rest.get(Routes.guildPrune(guildId), {\n\t\t\tsignal,\n\t\t\tquery: makeURLSearchParams(query),\n\t\t}) as Promise<RESTGetAPIGuildPruneCountResult>;\n\t}\n\n\t/**\n\t * Prunes members in a guild\n\t *\n\t * @see {@link https://discord.com/developers/docs/resources/guild#begin-guild-prune}\n\t * @param guildId - The id of the guild to prune members in\n\t * @param body - The options for pruning members\n\t * @param options - The options for initiating the prune\n\t */\n\tpublic async beginPrune(\n\t\tguildId: Snowflake,\n\t\tbody: RESTPostAPIGuildPruneJSONBody = {},\n\t\t{ reason, signal }: Pick<RequestData, 'reason' | 'signal'> = {},\n\t) {\n\t\treturn this.rest.post(Routes.guildPrune(guildId), {\n\t\t\tbody,\n\t\t\treason,\n\t\t\tsignal,\n\t\t}) as Promise<RESTGetAPIGuildPruneCountResult>;\n\t}\n\n\t/**\n\t * Fetches voice regions for a guild\n\t *\n\t * @see {@link https://discord.com/developers/docs/resources/guild#get-guild-voice-regions}\n\t * @param guildId - The id of the guild to fetch the voice regions from\n\t * @param options - The options for fetching the voice regions\n\t */\n\tpublic async getVoiceRegions(guildId: Snowflake, { signal }: Pick<RequestData, 'signal'> = {}) {\n\t\treturn this.rest.get(Routes.guildVoiceRegions(guildId), { signal }) as Promise<RESTGetAPIGuildVoiceRegionsResult>;\n\t}\n\n\t/**\n\t * Fetches the invites for a guild\n\t *\n\t * @see {@link https://discord.com/developers/docs/resources/guild#get-guild-invites}\n\t * @param guildId - The id of the guild to fetch the invites from\n\t * @param options - The options for fetching the invites\n\t */\n\tpublic async getInvites(guildId: Snowflake, { signal }: Pick<RequestData, 'signal'> = {}) {\n\t\treturn this.rest.get(Routes.guildInvites(guildId), { signal }) as Promise<RESTGetAPIGuildInvitesResult>;\n\t}\n\n\t/**\n\t * Fetches the integrations for a guild\n\t *\n\t * @see {@link https://discord.com/developers/docs/resources/guild#get-guild-integrations}\n\t * @param guildId - The id of the guild to fetch the integrations from\n\t * @param options - The options for fetching the integrations\n\t */\n\tpublic async getIntegrations(guildId: Snowflake, { signal }: Pick<RequestData, 'signal'> = {}) {\n\t\treturn this.rest.get(Routes.guildIntegrations(guildId), { signal }) as Promise<RESTGetAPIGuildIntegrationsResult>;\n\t}\n\n\t/**\n\t * Deletes an integration from a guild\n\t *\n\t * @see {@link https://discord.com/developers/docs/resources/guild#delete-guild-integration}\n\t * @param guildId - The id of the guild to delete the integration from\n\t * @param integrationId - The id of the integration to delete\n\t * @param options - The options for deleting the integration\n\t */\n\tpublic async deleteIntegration(\n\t\tguildId: Snowflake,\n\t\tintegrationId: Snowflake,\n\t\t{ reason, signal }: Pick<RequestData, 'reason' | 'signal'> = {},\n\t) {\n\t\tawait this.rest.delete(Routes.guildIntegration(guildId, integrationId), { reason, signal });\n\t}\n\n\t/**\n\t * Fetches the widget settings for a guild\n\t *\n\t * @see {@link https://discord.com/developers/docs/resources/guild#get-guild-widget-settings}\n\t * @param guildId - The id of the guild to fetch the widget settings from\n\t * @param options - The options for fetching the widget settings\n\t */\n\tpublic async getWidgetSettings(guildId: Snowflake, { signal }: Pick<RequestData, 'signal'> = {}) {\n\t\treturn this.rest.get(Routes.guildWidgetSettings(guildId), { signal }) as Promise<RESTGetAPIGuildWidgetImageResult>;\n\t}\n\n\t/**\n\t * Edits the widget settings for a guild\n\t *\n\t * @see {@link https://discord.com/developers/docs/resources/guild#modify-guild-widget}\n\t * @param guildId - The id of the guild to edit the widget settings from\n\t * @param body - The new widget settings data\n\t * @param options - The options for editing the widget settings\n\t */\n\tpublic async editWidgetSettings(\n\t\tguildId: Snowflake,\n\t\tbody: RESTPatchAPIGuildWidgetSettingsJSONBody,\n\t\t{ reason, signal }: Pick<RequestData, 'reason' | 'signal'> = {},\n\t) {\n\t\treturn this.rest.patch(Routes.guildWidgetSettings(guildId), {\n\t\t\treason,\n\t\t\tbody,\n\t\t\tsignal,\n\t\t}) as Promise<RESTPatchAPIGuildWidgetSettingsResult>;\n\t}\n\n\t/**\n\t * Fetches the widget for a guild\n\t *\n\t * @see {@link https://discord.com/developers/docs/resources/guild#get-guild-widget}\n\t * @param guildId - The id of the guild to fetch the widget from\n\t * @param options - The options for fetching the widget\n\t */\n\tpublic async getWidget(guildId: Snowflake, { signal }: Pick<RequestData, 'signal'> = {}) {\n\t\treturn this.rest.get(Routes.guildWidgetJSON(guildId), { signal }) as Promise<RESTGetAPIGuildWidgetJSONResult>;\n\t}\n\n\t/**\n\t * Fetches the vanity url for a guild\n\t *\n\t * @see {@link https://discord.com/developers/docs/resources/guild#get-guild-vanity-url}\n\t * @param guildId - The id of the guild to fetch the vanity url from\n\t * @param options - The options for fetching the vanity url\n\t */\n\tpublic async getVanityURL(guildId: Snowflake, { signal }: Pick<RequestData, 'signal'> = {}) {\n\t\treturn this.rest.get(Routes.guildVanityUrl(guildId), { signal }) as Promise<RESTGetAPIGuildVanityUrlResult>;\n\t}\n\n\t/**\n\t * Fetches the widget image for a guild\n\t *\n\t * @see {@link https://discord.com/developers/docs/resources/guild#get-guild-widget-image}\n\t * @param guildId - The id of the guild to fetch the widget image from\n\t * @param style - The style of the widget image\n\t * @param options - The options for fetching the widget image\n\t */\n\tpublic async getWidgetImage(\n\t\tguildId: Snowflake,\n\t\tstyle?: GuildWidgetStyle,\n\t\t{ signal }: Pick<RequestData, 'signal'> = {},\n\t) {\n\t\treturn this.rest.get(Routes.guildWidgetImage(guildId), {\n\t\t\tquery: makeURLSearchParams({ style }),\n\t\t\tsignal,\n\t\t}) as Promise<RESTGetAPIGuildWidgetImageResult>;\n\t}\n\n\t/**\n\t * Fetches the welcome screen for a guild\n\t *\n\t * @see {@link https://discord.com/developers/docs/resources/guild#get-guild-welcome-screen}\n\t * @param guildId - The id of the guild to fetch the welcome screen from\n\t * @param options - The options for fetching the welcome screen\n\t */\n\tpublic async getWelcomeScreen(guildId: Snowflake, { signal }: Pick<RequestData, 'signal'> = {}) {\n\t\treturn this.rest.get(Routes.guildWelcomeScreen(guildId), { signal }) as Promise<RESTGetAPIGuildWelcomeScreenResult>;\n\t}\n\n\t/**\n\t * Edits the welcome screen for a guild\n\t *\n\t * @see {@link https://discord.com/developers/docs/resources/guild#modify-guild-welcome-screen}\n\t * @param guildId - The id of the guild to edit the welcome screen for\n\t * @param body - The new welcome screen data\n\t * @param options - The options for editing the welcome screen\n\t */\n\tpublic async editWelcomeScreen(\n\t\tguildId: Snowflake,\n\t\tbody?: RESTPatchAPIGuildWelcomeScreenJSONBody,\n\t\t{ reason, signal }: Pick<RequestData, 'reason' | 'signal'> = {},\n\t) {\n\t\treturn this.rest.patch(Routes.guildWelcomeScreen(guildId), {\n\t\t\treason,\n\t\t\tbody,\n\t\t\tsignal,\n\t\t}) as Promise<RESTPatchAPIGuildWelcomeScreenResult>;\n\t}\n\n\t/**\n\t * Edits a user's voice state in a guild\n\t *\n\t * @see {@link https://discord.com/developers/docs/resources/guild#modify-user-voice-state}\n\t * @param guildId - The id of the guild to edit the current user's voice state in\n\t * @param userId - The id of the user to edit the voice state for\n\t * @param body - The data for editing the voice state\n\t * @param options - The options for editing the voice state\n\t */\n\tpublic async editUserVoiceState(\n\t\tguildId: Snowflake,\n\t\tuserId: Snowflake,\n\t\tbody: RESTPatchAPIGuildVoiceStateUserJSONBody,\n\t\t{ reason, signal }: Pick<RequestData, 'reason' | 'signal'> = {},\n\t) {\n\t\tawait this.rest.patch(Routes.guildVoiceState(guildId, userId), { reason, body, signal });\n\t}\n\n\t/**\n\t * Fetches all emojis for a guild\n\t *\n\t * @see {@link https://discord.com/developers/docs/resources/emoji#list-guild-emojis}\n\t * @param guildId - The id of the guild to fetch the emojis from\n\t * @param options - The options for fetching the emojis\n\t */\n\tpublic async getEmojis(guildId: Snowflake, { signal }: Pick<RequestData, 'signal'> = {}) {\n\t\treturn this.rest.get(Routes.guildEmojis(guildId), { signal }) as Promise<RESTGetAPIGuildEmojisResult>;\n\t}\n\n\t/**\n\t * Fetches an emoji for a guild\n\t *\n\t * @see {@link https://discord.com/developers/docs/resources/emoji#get-guild-emoji}\n\t * @param guildId - The id of the guild to fetch the emoji from\n\t * @param emojiId - The id of the emoji to fetch\n\t * @param options - The options for fetching the emoji\n\t */\n\tpublic async getEmoji(guildId: Snowflake, emojiId: Snowflake, { signal }: Pick<RequestData, 'signal'> = {}) {\n\t\treturn this.rest.get(Routes.guildEmoji(guildId, emojiId), { signal }) as Promise<RESTGetAPIGuildEmojiResult>;\n\t}\n\n\t/**\n\t * Creates a new emoji for a guild\n\t *\n\t * @see {@link https://discord.com/developers/docs/resources/emoji#create-guild-emoji}\n\t * @param guildId - The id of the guild to create the emoji from\n\t * @param body - The data for creating the emoji\n\t * @param options - The options for creating the emoji\n\t */\n\tpublic async createEmoji(\n\t\tguildId: Snowflake,\n\t\tbody: RESTPostAPIGuildEmojiJSONBody,\n\t\t{ reason, signal }: Pick<RequestData, 'reason' | 'signal'> = {},\n\t) {\n\t\treturn this.rest.post(Routes.guildEmojis(guildId), {\n\t\t\treason,\n\t\t\tbody,\n\t\t\tsignal,\n\t\t}) as Promise<RESTPostAPIGuildEmojiResult>;\n\t}\n\n\t/**\n\t * Edits an emoji for a guild\n\t *\n\t * @see {@link https://discord.com/developers/docs/resources/emoji#modify-guild-emoji}\n\t * @param guildId - The id of the guild to edit the emoji from\n\t * @param emojiId - The id of the emoji to edit\n\t * @param body - The data for editing the emoji\n\t * @param options - The options for editing the emoji\n\t */\n\tpublic async editEmoji(\n\t\tguildId: Snowflake,\n\t\temojiId: Snowflake,\n\t\tbody: RESTPatchAPIGuildEmojiJSONBody,\n\t\t{ reason, signal }: Pick<RequestData, 'reason' | 'signal'> = {},\n\t) {\n\t\treturn this.rest.patch(Routes.guildEmoji(guildId, emojiId), {\n\t\t\treason,\n\t\t\tbody,\n\t\t\tsignal,\n\t\t}) as Promise<RESTPatchAPIGuildEmojiResult>;\n\t}\n\n\t/**\n\t * Deletes an emoji for a guild\n\t *\n\t * @see {@link https://discord.com/developers/docs/resources/emoji#delete-guild-emoji}\n\t * @param guildId - The id of the guild to delete the emoji from\n\t * @param emojiId - The id of the emoji to delete\n\t * @param options - The options for deleting the emoji\n\t */\n\tpublic async deleteEmoji(\n\t\tguildId: Snowflake,\n\t\temojiId: Snowflake,\n\t\t{ reason, signal }: Pick<RequestData, 'reason' | 'signal'> = {},\n\t) {\n\t\tawait this.rest.delete(Routes.guildEmoji(guildId, emojiId), { reason, signal });\n\t}\n\n\t/**\n\t * Fetches all scheduled events for a guild\n\t *\n\t * @see {@link https://discord.com/developers/docs/resources/guild-scheduled-event#list-scheduled-events-for-guild}\n\t * @param guildId - The id of the guild to fetch the scheduled events from\n\t * @param query - The query options for fetching the scheduled events\n\t * @param options - The options for fetching the scheduled events\n\t */\n\tpublic async getScheduledEvents(\n\t\tguildId: Snowflake,\n\t\tquery: RESTGetAPIGuildScheduledEventsQuery = {},\n\t\t{ signal }: Pick<RequestData, 'signal'> = {},\n\t) {\n\t\treturn this.rest.get(Routes.guildScheduledEvents(guildId), {\n\t\t\tquery: makeURLSearchParams(query),\n\t\t\tsignal,\n\t\t}) as Promise<RESTGetAPIGuildScheduledEventsResult>;\n\t}\n\n\t/**\n\t * Creates a new scheduled event for a guild\n\t *\n\t * @see {@link https://discord.com/developers/docs/resources/guild-scheduled-event#create-guild-scheduled-event}\n\t * @param guildId - The id of the guild to create the scheduled event from\n\t * @param body - The data to create the event with\n\t * @param options - The options for creating the scheduled event\n\t */\n\tpublic async createScheduledEvent(\n\t\tguildId: Snowflake,\n\t\tbody: RESTPostAPIGuildScheduledEventJSONBody,\n\t\t{ reason, signal }: Pick<RequestData, 'reason' | 'signal'> = {},\n\t) {\n\t\treturn this.rest.post(Routes.guildScheduledEvents(guildId), {\n\t\t\treason,\n\t\t\tbody,\n\t\t\tsignal,\n\t\t}) as Promise<RESTPostAPIGuildScheduledEventResult>;\n\t}\n\n\t/**\n\t * Fetches a scheduled event for a guild\n\t *\n\t * @see {@link https://discord.com/developers/docs/resources/guild-scheduled-event#get-guild-scheduled-event}\n\t * @param guildId - The id of the guild to fetch the scheduled event from\n\t * @param eventId - The id of the scheduled event to fetch\n\t * @param query - The options for fetching the scheduled event\n\t * @param options - The options for fetching the scheduled event\n\t */\n\tpublic async getScheduledEvent(\n\t\tguildId: Snowflake,\n\t\teventId: Snowflake,\n\t\tquery: RESTGetAPIGuildScheduledEventQuery = {},\n\t\t{ signal }: Pick<RequestData, 'signal'> = {},\n\t) {\n\t\treturn this.rest.get(Routes.guildScheduledEvent(guildId, eventId), {\n\t\t\tquery: makeURLSearchParams(query),\n\t\t\tsignal,\n\t\t}) as Promise<RESTGetAPIGuildScheduledEventResult>;\n\t}\n\n\t/**\n\t * Edits a scheduled event for a guild\n\t *\n\t * @see {@link https://discord.com/developers/docs/resources/guild-scheduled-event#modify-guild-scheduled-event}\n\t * @param guildId - The id of the guild to edit the scheduled event from\n\t * @param eventId - The id of the scheduled event to edit\n\t * @param body - The new event data\n\t * @param options - The options for editing the scheduled event\n\t */\n\tpublic async editScheduledEvent(\n\t\tguildId: Snowflake,\n\t\teventId: Snowflake,\n\t\tbody: RESTPatchAPIGuildScheduledEventJSONBody,\n\t\t{ reason, signal }: Pick<RequestData, 'reason' | 'signal'> = {},\n\t) {\n\t\treturn this.rest.patch(Routes.guildScheduledEvent(guildId, eventId), {\n\t\t\treason,\n\t\t\tbody,\n\t\t\tsignal,\n\t\t}) as Promise<RESTPatchAPIGuildScheduledEventResult>;\n\t}\n\n\t/**\n\t * Deletes a scheduled event for a guild\n\t *\n\t * @see {@link https://discord.com/developers/docs/resources/guild-scheduled-event#delete-guild-scheduled-event}\n\t * @param guildId - The id of the guild to delete the scheduled event from\n\t * @param eventId - The id of the scheduled event to delete\n\t * @param options - The options for deleting the scheduled event\n\t */\n\tpublic async deleteScheduledEvent(\n\t\tguildId: Snowflake,\n\t\teventId: Snowflake,\n\t\t{ reason, signal }: Pick<RequestData, 'reason' | 'signal'> = {},\n\t) {\n\t\tawait this.rest.delete(Routes.guildScheduledEvent(guildId, eventId), { reason, signal });\n\t}\n\n\t/**\n\t * Gets all users that are interested in a scheduled event\n\t *\n\t * @see {@link https://discord.com/developers/docs/resources/guild-scheduled-event#get-guild-scheduled-event-users}\n\t * @param guildId - The id of the guild to fetch the scheduled event users from\n\t * @param eventId - The id of the scheduled event to fetch the users for\n\t * @param query - The options for fetching the scheduled event users\n\t * @param options - The options for fetching the scheduled event users\n\t */\n\tpublic async getScheduledEventUsers(\n\t\tguildId: Snowflake,\n\t\teventId: Snowflake,\n\t\tquery: RESTGetAPIGuildScheduledEventUsersQuery = {},\n\t\t{ signal }: Pick<RequestData, 'signal'> = {},\n\t) {\n\t\treturn this.rest.get(Routes.guildScheduledEventUsers(guildId, eventId), {\n\t\t\tquery: makeURLSearchParams(query),\n\t\t\tsignal,\n\t\t}) as Promise<RESTGetAPIGuildScheduledEventUsersResult>;\n\t}\n\n\t/**\n\t * Fetches all the templates for a guild\n\t *\n\t * @see {@link https://discord.com/developers/docs/resources/guild-template#get-guild-templates}\n\t * @param guildId - The id of the guild to fetch the templates from\n\t * @param options - The options for fetching the templates\n\t */\n\tpublic async getTemplates(guildId: Snowflake, { signal }: Pick<RequestData, 'signal'> = {}) {\n\t\treturn this.rest.get(Routes.guildTemplates(guildId), { signal }) as Promise<RESTGetAPIGuildTemplatesResult>;\n\t}\n\n\t/**\n\t * Syncs a template for a guild\n\t *\n\t * @see {@link https://discord.com/developers/docs/resources/guild-template#sync-guild-template}\n\t * @param guildId - The id of the guild to sync the template from\n\t * @param templateCode - The code of the template to sync\n\t * @param options - The options for syncing the template\n\t */\n\tpublic async syncTemplate(guildId: Snowflake, templateCode: string, { signal }: Pick<RequestData, 'signal'> = {}) {\n\t\treturn this.rest.put(Routes.guildTemplate(guildId, templateCode), {\n\t\t\tsignal,\n\t\t}) as Promise<RESTPutAPIGuildTemplateSyncResult>;\n\t}\n\n\t/**\n\t * Edits a template for a guild\n\t *\n\t * @see {@link https://discord.com/developers/docs/resources/guild-template#modify-guild-template}\n\t * @param guildId - The id of the guild to edit the template from\n\t * @param templateCode - The code of the template to edit\n\t * @param body - The data for editing the template\n\t * @param options - The options for editing the template\n\t */\n\tpublic async editTemplate(\n\t\tguildId: Snowflake,\n\t\ttemplateCode: string,\n\t\tbody: RESTPatchAPIGuildTemplateJSONBody,\n\t\t{ signal }: Pick<RequestData, 'signal'> = {},\n\t) {\n\t\treturn this.rest.patch(Routes.guildTemplate(guildId, templateCode), {\n\t\t\tbody,\n\t\t\tsignal,\n\t\t}) as Promise<RESTPatchAPIGuildTemplateResult>;\n\t}\n\n\t/**\n\t * Deletes a template for a guild\n\t *\n\t * @see {@link https://discord.com/developers/docs/resources/guild-template#delete-guild-template}\n\t * @param guildId - The id of the guild to delete the template from\n\t * @param templateCode - The code of the template to delete\n\t * @param options - The options for deleting the template\n\t */\n\tpublic async deleteTemplate(guildId: Snowflake, templateCode: string, { signal }: Pick<RequestData, 'signal'> = {}) {\n\t\tawait this.rest.delete(Routes.guildTemplate(guildId, templateCode), { signal });\n\t}\n\n\t/**\n\t * Fetches all the stickers for a guild\n\t *\n\t * @see {@link https://discord.com/developers/docs/resources/sticker#list-guild-stickers}\n\t * @param guildId - The id of the guild to fetch the stickers from\n\t * @param options - The options for fetching the stickers\n\t */\n\tpublic async getStickers(guildId: Snowflake, { signal }: Pick<RequestData, 'signal'> = {}) {\n\t\treturn this.rest.get(Routes.guildStickers(guildId), { signal }) as Promise<RESTGetAPIGuildStickersResult>;\n\t}\n\n\t/**\n\t * Fetches a sticker for a guild\n\t *\n\t * @see {@link https://discord.com/developers/docs/resources/sticker#get-guild-sticker}\n\t * @param guildId - The id of the guild to fetch the sticker from\n\t * @param stickerId - The id of the sticker to fetch\n\t * @param options - The options for fetching the sticker\n\t */\n\tpublic async getSticker(guildId: Snowflake, stickerId: Snowflake, { signal }: Pick<RequestData, 'signal'> = {}) {\n\t\treturn this.rest.get(Routes.guildSticker(guildId, stickerId), { signal }) as Promise<RESTGetAPIGuildStickerResult>;\n\t}\n\n\t/**\n\t * Creates a sticker for a guild\n\t *\n\t * @see {@link https://discord.com/developers/docs/resources/sticker#create-guild-sticker}\n\t * @param guildId - The id of the guild to create the sticker for\n\t * @param body - The data for creating the sticker\n\t * @param options - The options for creating the sticker\n\t */\n\tpublic async createSticker(\n\t\tguildId: Snowflake,\n\t\t{ file, ...body }: Omit<RESTPostAPIGuildStickerFormDataBody, 'file'> & { file: RawFile },\n\t\t{ reason, signal }: Pick<RequestData, 'reason' | 'signal'> = {},\n\t) {\n\t\tconst fileData = { ...file, key: 'file' };\n\n\t\treturn this.rest.post(Routes.guildStickers(guildId), {\n\t\t\tappendToFormData: true,\n\t\t\tbody,\n\t\t\tfiles: [fileData],\n\t\t\treason,\n\t\t\tsignal,\n\t\t}) as Promise<RESTPostAPIGuildStickerResult>;\n\t}\n\n\t/**\n\t * Edits a sticker for a guild\n\t *\n\t * @see {@link https://discord.com/developers/docs/resources/sticker#modify-guild-sticker}\n\t * @param guildId - The id of the guild to edit the sticker from\n\t * @param stickerId - The id of the sticker to edit\n\t * @param body - The data for editing the sticker\n\t * @param options - The options for editing the sticker\n\t */\n\tpublic async editSticker(\n\t\tguildId: Snowflake,\n\t\tstickerId: Snowflake,\n\t\tbody: RESTPatchAPIGuildStickerJSONBody,\n\t\t{ reason, signal }: Pick<RequestData, 'reason' | 'signal'> = {},\n\t) {\n\t\treturn this.rest.patch(Routes.guildSticker(guildId, stickerId), {\n\t\t\treason,\n\t\t\tbody,\n\t\t\tsignal,\n\t\t}) as Promise<RESTPatchAPIGuildStickerResult>;\n\t}\n\n\t/**\n\t * Deletes a sticker for a guild\n\t *\n\t * @see {@link https://discord.com/developers/docs/resources/sticker#delete-guild-sticker}\n\t * @param guildId - The id of the guild to delete the sticker from\n\t * @param stickerId - The id of the sticker to delete\n\t * @param options - The options for deleting the sticker\n\t */\n\tpublic async deleteSticker(\n\t\tguildId: Snowflake,\n\t\tstickerId: Snowflake,\n\t\t{ reason, signal }: Pick<RequestData, 'reason' | 'signal'> = {},\n\t) {\n\t\tawait this.rest.delete(Routes.guildSticker(guildId, stickerId), { reason, signal });\n\t}\n\n\t/**\n\t * Fetches the audit logs for a guild\n\t *\n\t * @see {@link https://discord.com/developers/docs/resources/audit-log#get-guild-audit-log}\n\t * @param guildId - The id of the guild to fetch the audit logs from\n\t * @param query - The query options for fetching the audit logs\n\t * @param options - The options for fetching the audit logs\n\t */\n\tpublic async getAuditLogs(\n\t\tguildId: Snowflake,\n\t\tquery: RESTGetAPIAuditLogQuery = {},\n\t\t{ signal }: Pick<RequestData, 'signal'> = {},\n\t) {\n\t\treturn this.rest.get(Routes.guildAuditLog(guildId), {\n\t\t\tquery: makeURLSearchParams(query),\n\t\t\tsignal,\n\t\t}) as Promise<RESTGetAPIAuditLogResult>;\n\t}\n\n\t/**\n\t * Fetches all auto moderation rules for a guild\n\t *\n\t * @see {@link https://discord.com/developers/docs/resources/auto-moderation#list-auto-moderation-rules-for-guild}\n\t * @param guildId - The id of the guild to fetch the auto moderation rules from\n\t * @param options - The options for fetching the auto moderation rules\n\t */\n\tpublic async getAutoModerationRules(guildId: Snowflake, { signal }: Pick<RequestData, 'signal'> = {}) {\n\t\treturn this.rest.get(Routes.guildAutoModerationRules(guildId), {\n\t\t\tsignal,\n\t\t}) as Promise<RESTGetAPIAutoModerationRulesResult>;\n\t}\n\n\t/**\n\t * Fetches an auto moderation rule for a guild\n\t *\n\t * @see {@link https://discord.com/developers/docs/resources/auto-moderation#get-auto-moderation-rule}\n\t * @param guildId - The id of the guild to fetch the auto moderation rule from\n\t * @param ruleId - The id of the auto moderation rule to fetch\n\t * @param options - The options for fetching the auto moderation rule\n\t */\n\tpublic async getAutoModerationRule(\n\t\tguildId: Snowflake,\n\t\truleId: Snowflake,\n\t\t{ signal }: Pick<RequestData, 'signal'> = {},\n\t) {\n\t\treturn this.rest.get(Routes.guildAutoModerationRule(guildId, ruleId), {\n\t\t\tsignal,\n\t\t}) as Promise<RESTGetAPIAutoModerationRuleResult>;\n\t}\n\n\t/**\n\t * Creates a new auto moderation rule for a guild\n\t *\n\t * @see {@link https://discord.com/developers/docs/resources/auto-moderation#create-auto-moderation-rule}\n\t * @param guildId - The id of the guild to create the auto moderation rule from\n\t * @param body - The data for creating the auto moderation rule\n\t * @param options - The options for creating the auto moderation rule\n\t */\n\tpublic async createAutoModerationRule(\n\t\tguildId: Snowflake,\n\t\tbody: RESTPostAPIAutoModerationRuleJSONBody,\n\t\t{ reason, signal }: Pick<RequestData, 'reason' | 'signal'> = {},\n\t) {\n\t\treturn this.rest.post(Routes.guildAutoModerationRules(guildId), {\n\t\t\treason,\n\t\t\tbody,\n\t\t\tsignal,\n\t\t}) as Promise<RESTPostAPIAutoModerationRuleResult>;\n\t}\n\n\t/**\n\t * Edits an auto moderation rule for a guild\n\t *\n\t * @see {@link https://discord.com/developers/docs/resources/auto-moderation#modify-auto-moderation-rule}\n\t * @param guildId - The id of the guild to edit the auto moderation rule from\n\t * @param ruleId - The id of the auto moderation rule to edit\n\t * @param body - The data for editing the auto moderation rule\n\t * @param options - The options for editing the auto moderation rule\n\t */\n\tpublic async editAutoModerationRule(\n\t\tguildId: Snowflake,\n\t\truleId: Snowflake,\n\t\tbody: RESTPatchAPIAutoModerationRuleJSONBody,\n\t\t{ reason, signal }: Pick<RequestData, 'reason' | 'signal'> = {},\n\t) {\n\t\treturn this.rest.patch(Routes.guildAutoModerationRule(guildId, ruleId), {\n\t\t\treason,\n\t\t\tbody,\n\t\t\tsignal,\n\t\t}) as Promise<RESTPatchAPIAutoModerationRuleJSONBody>;\n\t}\n\n\t/**\n\t * Deletes an auto moderation rule for a guild\n\t *\n\t * @see {@link https://discord.com/developers/docs/resources/auto-moderation#delete-auto-moderation-rule}\n\t * @param guildId - The id of the guild to delete the auto moderation rule from\n\t * @param options - The options for deleting the auto moderation rule\n\t */\n\tpublic async deleteAutoModerationRule(\n\t\tguildId: Snowflake,\n\t\truleId: Snowflake,\n\t\t{ reason, signal }: Pick<RequestData, 'reason' | 'signal'> = {},\n\t) {\n\t\tawait this.rest.delete(Routes.guildAutoModerationRule(guildId, ruleId), { reason, signal });\n\t}\n\n\t/**\n\t * Fetches a guild member\n\t *\n\t * @see {@link https://discord.com/developers/docs/resources/guild#get-guild-member}\n\t * @param guildId - The id of the guild\n\t * @param userId - The id of the user\n\t * @param options - The options for fetching the guild member\n\t */\n\tpublic async getMember(guildId: Snowflake, userId: Snowflake, { signal }: Pick<RequestData, 'signal'> = {}) {\n\t\treturn this.rest.get(Routes.guildMember(guildId, userId), { signal }) as Promise<RESTGetAPIGuildMemberResult>;\n\t}\n\n\t/**\n\t * Searches for guild members\n\t *\n\t * @see {@link https://discord.com/developers/docs/resources/guild#search-guild-members}\n\t * @param guildId - The id of the guild to search in\n\t * @param query - The query to search for\n\t * @param options - The options for searching for guild members\n\t */\n\tpublic async searchForMembers(\n\t\tguildId: Snowflake,\n\t\tquery: RESTGetAPIGuildMembersSearchQuery,\n\t\t{ signal }: Pick<RequestData, 'signal'> = {},\n\t) {\n\t\treturn this.rest.get(Routes.guildMembersSearch(guildId), {\n\t\t\tquery: makeURLSearchParams(query),\n\t\t\tsignal,\n\t\t}) as Promise<RESTGetAPIGuildMembersSearchResult>;\n\t}\n\n\t/**\n\t * Edits a guild member\n\t *\n\t * @see {@link https://discord.com/developers/docs/resources/guild#modify-guild-member}\n\t * @param guildId - The id of the guild\n\t * @param userId - The id of the user\n\t * @param body - The data to use when editing the guild member\n\t * @param options - The options for editing the guild member\n\t */\n\tpublic async editMember(\n\t\tguildId: Snowflake,\n\t\tuserId: Snowflake,\n\t\tbody: RESTPatchAPIGuildMemberJSONBody = {},\n\t\t{ reason, signal }: Pick<RequestData, 'reason' | 'signal'> = {},\n\t) {\n\t\treturn this.rest.patch(Routes.guildMember(guildId, userId), {\n\t\t\treason,\n\t\t\tbody,\n\t\t\tsignal,\n\t\t}) as Promise<RESTPatchAPIGuildMemberResult>;\n\t}\n\n\t/**\n\t * Adds a role to a guild member\n\t *\n\t * @see {@link https://discord.com/developers/docs/resources/guild#add-guild-member-role}\n\t * @param guildId - The id of the guild\n\t * @param userId - The id of the user\n\t * @param roleId - The id of the role\n\t * @param options - The options for adding a role to a guild member\n\t */\n\tpublic async addRoleToMember(\n\t\tguildId: Snowflake,\n\t\tuserId: Snowflake,\n\t\troleId: Snowflake,\n\t\t{ reason, signal }: Pick<RequestData, 'reason' | 'signal'> = {},\n\t) {\n\t\tawait this.rest.put(Routes.guildMemberRole(guildId, userId, roleId), { reason, signal });\n\t}\n\n\t/**\n\t * Removes a role from a guild member\n\t *\n\t * @see {@link https://discord.com/developers/docs/resources/guild#remove-guild-member-role}\n\t * @param guildId - The id of the guild\n\t * @param userId - The id of the user\n\t * @param roleId - The id of the role\n\t * @param options - The options for removing a role from a guild member\n\t */\n\tpublic async removeRoleFromMember(\n\t\tguildId: Snowflake,\n\t\tuserId: Snowflake,\n\t\troleId: Snowflake,\n\t\t{ reason, signal }: Pick<RequestData, 'reason' | 'signal'> = {},\n\t) {\n\t\tawait this.rest.delete(Routes.guildMemberRole(guildId, userId, roleId), { reason, signal });\n\t}\n\n\t/**\n\t * Fetches a guild template\n\t *\n\t * @see {@link https://discord.com/developers/docs/resources/guild-template#get-guild-template}\n\t * @param templateCode - The code of the template\n\t * @param options - The options for fetching the guild template\n\t */\n\tpublic async getTemplate(templateCode: string, { signal }: Pick<RequestData, 'signal'> = {}) {\n\t\treturn this.rest.get(Routes.template(templateCode), { signal }) as Promise<RESTGetAPITemplateResult>;\n\t}\n\n\t/**\n\t * Creates a new template\n\t *\n\t * @see {@link https://discord.com/developers/docs/resources/guild-template#create-guild-template}\n\t * @param templateCode - The code of the template\n\t * @param body - The data to use when creating the template\n\t * @param options - The options for creating the template\n\t */\n\tpublic async createTemplate(\n\t\ttemplateCode: string,\n\t\tbody: RESTPostAPITemplateCreateGuildJSONBody,\n\t\t{ signal }: Pick<RequestData, 'signal'> = {},\n\t) {\n\t\treturn this.rest.post(Routes.template(templateCode), { body, signal }) as Promise<RESTPostAPIGuildTemplatesResult>;\n\t}\n\n\t/**\n\t * Fetches webhooks for a guild\n\t *\n\t * @see {@link https://discord.com/developers/docs/resources/webhook#get-guild-webhooks}\n\t * @param id - The id of the guild\n\t */\n\tpublic async getWebhooks(id: Snowflake) {\n\t\treturn this.rest.get(Routes.guildWebhooks(id)) as Promise<RESTGetAPIGuildWebhooksResult>;\n\t}\n\n\t/**\n\t * Sets the voice state for the current user\n\t *\n\t * @see {@link https://discord.com/developers/docs/resources/guild#modify-current-user-voice-state}\n\t * @param guildId - The id of the guild\n\t * @param body - The options to use when setting the voice state\n\t */\n\tpublic async setVoiceState(guildId: Snowflake, body: RESTPatchAPIGuildVoiceStateCurrentMemberJSONBody = {}) {\n\t\treturn this.rest.patch(Routes.guildVoiceState(guildId, '@me'), {\n\t\t\tbody,\n\t\t}) as Promise<RESTPatchAPIGuildVoiceStateCurrentMemberResult>;\n\t}\n}\n","import type { RawFile, RequestData, REST } from '@discordjs/rest';\nimport { InteractionResponseType, Routes } from 'discord-api-types/v10';\nimport type {\n\tAPICommandAutocompleteInteractionResponseCallbackData,\n\tAPIInteractionResponseCallbackData,\n\tAPIModalInteractionResponseCallbackData,\n\tRESTGetAPIWebhookWithTokenMessageResult,\n\tSnowflake,\n\tAPIInteractionResponseDeferredChannelMessageWithSource,\n} from 'discord-api-types/v10';\nimport type { WebhooksAPI } from './webhook.js';\n\nexport class InteractionsAPI {\n\tpublic constructor(private readonly rest: REST, private readonly webhooks: WebhooksAPI) {}\n\n\t/**\n\t * Replies to an interaction\n\t *\n\t * @see {@link https://discord.com/developers/docs/interactions/receiving-and-responding#create-interaction-response}\n\t * @param interactionId - The id of the interaction\n\t * @param interactionToken - The token of the interaction\n\t * @param body - The callback data to use when replying\n\t * @param options - The options to use when replying\n\t */\n\tpublic async reply(\n\t\tinteractionId: Snowflake,\n\t\tinteractionToken: string,\n\t\t{ files, ...data }: APIInteractionResponseCallbackData & { files?: RawFile[] },\n\t\t{ signal }: Pick<RequestData, 'signal'> = {},\n\t) {\n\t\tawait this.rest.post(Routes.interactionCallback(interactionId, interactionToken), {\n\t\t\tfiles,\n\t\t\tauth: false,\n\t\t\tbody: {\n\t\t\t\ttype: InteractionResponseType.ChannelMessageWithSource,\n\t\t\t\tdata,\n\t\t\t},\n\t\t\tsignal,\n\t\t});\n\t}\n\n\t/**\n\t * Defers the reply to an interaction\n\t *\n\t * @see {@link https://discord.com/developers/docs/interactions/receiving-and-responding#create-interaction-response}\n\t * @param interactionId - The id of the interaction\n\t * @param interactionToken - The token of the interaction\n\t * @param data - The data to use when deferring the reply\n\t * @param options - The options to use when deferring\n\t */\n\tpublic async defer(\n\t\tinteractionId: Snowflake,\n\t\tinteractionToken: string,\n\t\tdata?: APIInteractionResponseDeferredChannelMessageWithSource['data'],\n\t\t{ signal }: Pick<RequestData, 'signal'> = {},\n\t) {\n\t\tawait this.rest.post(Routes.interactionCallback(interactionId, interactionToken), {\n\t\t\tauth: false,\n\t\t\tbody: {\n\t\t\t\ttype: InteractionResponseType.DeferredChannelMessageWithSource,\n\t\t\t\tdata,\n\t\t\t},\n\t\t\tsignal,\n\t\t});\n\t}\n\n\t/**\n\t * Defers an update from a message component interaction\n\t *\n\t * @see {@link https://discord.com/developers/docs/interactions/receiving-and-responding#create-interaction-response}\n\t * @param interactionId - The id of the interaction\n\t * @param interactionToken - The token of the interaction\n\t * @param options - The options to use when deferring\n\t */\n\tpublic async deferMessageUpdate(\n\t\tinteractionId: Snowflake,\n\t\tinteractionToken: string,\n\t\t{ signal }: Pick<RequestData, 'signal'> = {},\n\t) {\n\t\tawait this.rest.post(Routes.interactionCallback(interactionId, interactionToken), {\n\t\t\tauth: false,\n\t\t\tbody: {\n\t\t\t\ttype: InteractionResponseType.DeferredMessageUpdate,\n\t\t\t},\n\t\t\tsignal,\n\t\t});\n\t}\n\n\t/**\n\t * Reply to a deferred interaction\n\t *\n\t * @see {@link https://discord.com/developers/docs/interactions/receiving-and-responding#create-followup-message}\n\t * @param applicationId - The application id of the interaction\n\t * @param interactionToken - The token of the interaction\n\t * @param body - The callback data to use when replying\n\t * @param options - The options to use when replying\n\t */\n\tpublic async followUp(\n\t\tapplicationId: Snowflake,\n\t\tinteractionToken: string,\n\t\tbody: APIInteractionResponseCallbackData & { files?: RawFile[] },\n\t\t{ signal }: Pick<RequestData, 'signal'> = {},\n\t) {\n\t\tawait this.webhooks.execute(applicationId, interactionToken, body, { signal });\n\t}\n\n\t/**\n\t * Edits the initial reply to an interaction\n\t *\n\t * @see {@link https://discord.com/developers/docs/interactions/receiving-and-responding#edit-original-interaction-response}\n\t * @see {@link https://discord.com/developers/docs/interactions/receiving-and-responding#edit-followup-message}\n\t * @param applicationId - The application id of the interaction\n\t * @param interactionToken - The token of the interaction\n\t * @param callbackData - The callback data to use when editing the reply\n\t * @param messageId - The id of the message to edit. If omitted, the original reply will be edited\n\t * @param options - The options to use when editing the reply\n\t */\n\tpublic async editReply(\n\t\tapplicationId: Snowflake,\n\t\tinteractionToken: string,\n\t\tcallbackData: APIInteractionResponseCallbackData & { files?: RawFile[] },\n\t\tmessageId?: Snowflake | '@original',\n\t\t{ signal }: Pick<RequestData, 'signal'> = {},\n\t) {\n\t\treturn this.webhooks.editMessage(applicationId, interactionToken, messageId ?? '@original', callbackData, {\n\t\t\tsignal,\n\t\t});\n\t}\n\n\t/**\n\t * Fetches the initial reply to an interaction\n\t *\n\t * @see {@link https://discord.com/developers/docs/interactions/receiving-and-responding#get-original-interaction-response}\n\t * @param applicationId - The application id of the interaction\n\t * @param interactionToken - The token of the interaction\n\t * @param options - The options to use when fetching the reply\n\t */\n\tpublic async getOriginalReply(\n\t\tapplicationId: Snowflake,\n\t\tinteractionToken: string,\n\t\t{ signal }: Pick<RequestData, 'signal'> = {},\n\t) {\n\t\treturn this.webhooks.getMessage(\n\t\t\tapplicationId,\n\t\t\tinteractionToken,\n\t\t\t'@original',\n\t\t\t{},\n\t\t\t{ signal },\n\t\t) as Promise<RESTGetAPIWebhookWithTokenMessageResult>;\n\t}\n\n\t/**\n\t * Deletes the initial reply to an interaction\n\t *\n\t * @see {@link https://discord.com/developers/docs/interactions/receiving-and-responding#delete-original-interaction-response}\n\t * @see {@link https://discord.com/developers/docs/interactions/receiving-and-responding#delete-followup-message}\n\t * @param applicationId - The application id of the interaction\n\t * @param interactionToken - The token of the interaction\n\t * @param messageId - The id of the message to delete. If omitted, the original reply will be deleted\n\t * @param options - The options to use when deleting the reply\n\t */\n\tpublic async deleteReply(\n\t\tapplicationId: Snowflake,\n\t\tinteractionToken: string,\n\t\tmessageId?: Snowflake | '@original',\n\t\t{ signal }: Pick<RequestData, 'signal'> = {},\n\t) {\n\t\tawait this.webhooks.deleteMessage(applicationId, interactionToken, messageId ?? '@original', {}, { signal });\n\t}\n\n\t/**\n\t * Updates the the message the component interaction was triggered on\n\t *\n\t * @see {@link https://discord.com/developers/docs/interactions/receiving-and-responding#create-interaction-response}\n\t * @param interactionId - The id of the interaction\n\t * @param interactionToken - The token of the interaction\n\t * @param callbackData - The callback data to use when updating the interaction\n\t * @param options - The options to use when updating the interaction\n\t */\n\tpublic async updateMessage(\n\t\tinteractionId: Snowflake,\n\t\tinteractionToken: string,\n\t\t{ files, ...data }: APIInteractionResponseCallbackData & { files?: RawFile[] },\n\t\t{ signal }: Pick<RequestData, 'signal'> = {},\n\t) {\n\t\tawait this.rest.post(Routes.interactionCallback(interactionId, interactionToken), {\n\t\t\tfiles,\n\t\t\tauth: false,\n\t\t\tbody: {\n\t\t\t\ttype: InteractionResponseType.UpdateMessage,\n\t\t\t\tdata,\n\t\t\t},\n\t\t\tsignal,\n\t\t});\n\t}\n\n\t/**\n\t * Sends an autocomplete response to an interaction\n\t *\n\t * @see {@link https://discord.com/developers/docs/interactions/receiving-and-responding#create-interaction-response}\n\t * @param interactionId - The id of the interaction\n\t * @param interactionToken - The token of the interaction\n\t * @param callbackData - The callback data for the autocomplete response\n\t * @param options - The options to use when sending the autocomplete response\n\t */\n\tpublic async createAutocompleteResponse(\n\t\tinteractionId: Snowflake,\n\t\tinteractionToken: string,\n\t\tcallbackData: APICommandAutocompleteInteractionResponseCallbackData,\n\t\t{ signal }: Pick<RequestData, 'signal'> = {},\n\t) {\n\t\tawait this.rest.post(Routes.interactionCallback(interactionId, interactionToken), {\n\t\t\tauth: false,\n\t\t\tbody: {\n\t\t\t\ttype: InteractionResponseType.ApplicationCommandAutocompleteResult,\n\t\t\t\tdata: callbackData,\n\t\t\t},\n\t\t\tsignal,\n\t\t});\n\t}\n\n\t/**\n\t * Sends a modal response to an interaction\n\t *\n\t * @see {@link https://discord.com/developers/docs/interactions/receiving-and-responding#create-interaction-response}\n\t * @param interactionId - The id of the interaction\n\t * @param interactionToken - The token of the interaction\n\t * @param callbackData - The modal callback data to send\n\t * @param options - The options to use when sending the modal\n\t */\n\tpublic async createModal(\n\t\tinteractionId: Snowflake,\n\t\tinteractionToken: string,\n\t\tcallbackData: APIModalInteractionResponseCallbackData,\n\t\t{ signal }: Pick<RequestData, 'signal'> = {},\n\t) {\n\t\tawait this.rest.post(Routes.interactionCallback(interactionId, interactionToken), {\n\t\t\tauth: false,\n\t\t\tbody: {\n\t\t\t\ttype: InteractionResponseType.Modal,\n\t\t\t\tdata: callbackData,\n\t\t\t},\n\t\t\tsignal,\n\t\t});\n\t}\n}\n","import { makeURLSearchParams, type RequestData, type REST } from '@discordjs/rest';\nimport { Routes, type RESTGetAPIInviteQuery, type RESTGetAPIInviteResult } from 'discord-api-types/v10';\n\nexport class InvitesAPI {\n\tpublic constructor(private readonly rest: REST) {}\n\n\t/**\n\t * Fetches an invite\n\t *\n\t * @see {@link https://discord.com/developers/docs/resources/invite#get-invite}\n\t * @param code - The invite code\n\t * @param query - The options to use when fetching the invite\n\t * @param options - The options to use when fetching the invite\n\t */\n\tpublic async get(code: string, query: RESTGetAPIInviteQuery = {}, { signal }: Pick<RequestData, 'signal'> = {}) {\n\t\treturn this.rest.get(Routes.invite(code), {\n\t\t\tquery: makeURLSearchParams(query),\n\t\t\tsignal,\n\t\t}) as Promise<RESTGetAPIInviteResult>;\n\t}\n\n\t/**\n\t * Deletes an invite\n\t *\n\t * @see {@link https://discord.com/developers/docs/resources/invite#delete-invite}\n\t * @param code - The invite code\n\t * @param options - The options to use when deleting the invite\n\t */\n\tpublic async delete(code: string, { reason, signal }: Pick<RequestData, 'reason' | 'signal'> = {}) {\n\t\tawait this.rest.delete(Routes.invite(code), { reason, signal });\n\t}\n}\n","import { URL } from 'node:url';\nimport { type RequestData, type REST, makeURLSearchParams } from '@discordjs/rest';\nimport {\n\tRoutes,\n\tRouteBases,\n\ttype RESTOAuth2AuthorizationQuery,\n\ttype RESTPostOAuth2RefreshTokenURLEncodedData,\n\ttype RESTPostOAuth2RefreshTokenResult,\n\ttype RESTPostOAuth2ClientCredentialsURLEncodedData,\n\ttype RESTPostOAuth2ClientCredentialsResult,\n\ttype RESTGetAPIOAuth2CurrentAuthorizationResult,\n\ttype RESTGetAPIOAuth2CurrentApplicationResult,\n\ttype RESTPostOAuth2AccessTokenURLEncodedData,\n\ttype RESTPostOAuth2AccessTokenResult,\n} from 'discord-api-types/v10';\n\nexport class OAuth2API {\n\tpublic constructor(private readonly rest: REST) {}\n\n\t/**\n\t * Creates an OAuth2 authorization URL given the options\n\t *\n\t * @see {@link https://discord.com/developers/docs/topics/oauth2#authorization-code-grant-authorization-url-example}\n\t * @param options - The options for creating the authorization URL\n\t */\n\tpublic generateAuthorizationURL(options: RESTOAuth2AuthorizationQuery) {\n\t\tconst url = new URL(`${RouteBases.api}${Routes.oauth2Authorization()}`);\n\t\turl.search = makeURLSearchParams(options).toString();\n\t\treturn url.toString();\n\t}\n\n\t/**\n\t * Performs an OAuth2 token exchange, giving you an access token\n\t *\n\t * @see {@link https://discord.com/developers/docs/topics/oauth2#authorization-code-grant-access-token-exchange-example}\n\t * @param body - The body of the token exchange request\n\t * @param options - The options for the token exchange request\n\t */\n\tpublic async tokenExchange(\n\t\tbody: RESTPostOAuth2AccessTokenURLEncodedData,\n\t\t{ signal }: Pick<RequestData, 'signal'> = {},\n\t) {\n\t\treturn this.rest.post(Routes.oauth2TokenExchange(), {\n\t\t\tbody: makeURLSearchParams(body),\n\t\t\tpassThroughBody: true,\n\t\t\theaders: {\n\t\t\t\t'Content-Type': 'application/x-www-form-urlencoded',\n\t\t\t},\n\t\t\tsignal,\n\t\t}) as Promise<RESTPostOAuth2AccessTokenResult>;\n\t}\n\n\t/**\n\t * Refreshes an OAuth2 access token, giving you a new one\n\t *\n\t * @see {@link https://discord.com/developers/docs/topics/oauth2#authorization-code-grant-refresh-token-exchange-example}\n\t * @param body - The options for the refresh token request\n\t * @param options - The options for the refresh token request\n\t */\n\tpublic async refreshToken(\n\t\tbody: RESTPostOAuth2RefreshTokenURLEncodedData,\n\t\t{ signal }: Pick<RequestData, 'signal'> = {},\n\t) {\n\t\treturn this.rest.post(Routes.oauth2TokenExchange(), {\n\t\t\tbody: makeURLSearchParams(body),\n\t\t\tpassThroughBody: true,\n\t\t\theaders: {\n\t\t\t\t'Content-Type': 'application/x-www-form-urlencoded',\n\t\t\t},\n\t\t\tsignal,\n\t\t}) as Promise<RESTPostOAuth2RefreshTokenResult>;\n\t}\n\n\t/**\n\t * Fetches the bearer token for the current application\n\t *\n\t * @remarks\n\t * This is primarily used for testing purposes\n\t * @see {@link https://discord.com/developers/docs/topics/oauth2#client-credentials-grant}\n\t * @param body - The options for the client credentials grant request\n\t * @param options - The options for the client credentials grant request\n\t */\n\tpublic async getToken(\n\t\tbody: RESTPostOAuth2ClientCredentialsURLEncodedData,\n\t\t{ signal }: Pick<RequestData, 'signal'> = {},\n\t) {\n\t\treturn this.rest.post(Routes.oauth2TokenExchange(), {\n\t\t\tbody: makeURLSearchParams(body),\n\t\t\tpassThroughBody: true,\n\t\t\theaders: {\n\t\t\t\t'Content-Type': 'application/x-www-form-urlencoded',\n\t\t\t},\n\t\t\tsignal,\n\t\t}) as Promise<RESTPostOAuth2ClientCredentialsResult>;\n\t}\n\n\t/**\n\t * Fetches the current bot's application information\n\t *\n\t * @see {@link https://discord.com/developers/docs/topics/oauth2#get-current-bot-application-information}\n\t * @param options - The options for the current bot application information request\n\t */\n\tpublic async getCurrentBotApplicationInformation({ signal }: Pick<RequestData, 'signal'> = {}) {\n\t\treturn this.rest.get(Routes.oauth2CurrentApplication(), {\n\t\t\tsignal,\n\t\t}) as Promise<RESTGetAPIOAuth2CurrentApplicationResult>;\n\t}\n\n\t/**\n\t * Fetches the current authorization information\n\t *\n\t * @see {@link https://discord.com/developers/docs/topics/oauth2#get-current-authorization-information}\n\t * @param options - The options for the current authorization information request\n\t */\n\tpublic async getCurrentAuthorizationInformation({ signal }: Pick<RequestData, 'signal'> = {}) {\n\t\treturn this.rest.get(Routes.oauth2CurrentAuthorization(), {\n\t\t\tsignal,\n\t\t}) as Promise<RESTGetAPIOAuth2CurrentAuthorizationResult>;\n\t}\n}\n","import type { RequestData, REST } from '@discordjs/rest';\nimport {\n\tRoutes,\n\ttype RESTGetAPIApplicationRoleConnectionMetadataResult,\n\ttype RESTPutAPIApplicationRoleConnectionMetadataResult,\n\ttype RESTPutAPIApplicationCommandPermissionsJSONBody,\n\ttype Snowflake,\n} from 'discord-api-types/v10';\n\nexport class RoleConnectionsAPI {\n\tpublic constructor(private readonly rest: REST) {}\n\n\t/**\n\t * Gets the role connection metadata records for the application\n\t *\n\t * @see {@link https://discord.com/developers/docs/resources/application-role-connection-metadata#get-application-role-connection-metadata-records}\n\t * @param applicationId - The id of the application to get role connection metadata records for\n\t * @param options - The options to use when fetching the role connection metadata records\n\t */\n\tpublic async getMetadataRecords(applicationId: Snowflake, { signal }: Pick<RequestData, 'signal'> = {}) {\n\t\treturn this.rest.get(Routes.applicationRoleConnectionMetadata(applicationId), {\n\t\t\tsignal,\n\t\t}) as Promise<RESTGetAPIApplicationRoleConnectionMetadataResult>;\n\t}\n\n\t/**\n\t * Updates the role connection metadata records for the application\n\t *\n\t * @see {@link https://discord.com/developers/docs/resources/application-role-connection-metadata#update-application-role-connection-metadata-records}\n\t * @param applicationId - The id of the application to update role connection metadata records for\n\t * @param body - The new role connection metadata records\n\t * @param options - The options to use when updating the role connection metadata records\n\t */\n\tpublic async updateMetadataRecords(\n\t\tapplicationId: Snowflake,\n\t\tbody: RESTPutAPIApplicationCommandPermissionsJSONBody,\n\t\t{ signal }: Pick<RequestData, 'signal'> = {},\n\t) {\n\t\treturn this.rest.put(Routes.applicationRoleConnectionMetadata(applicationId), {\n\t\t\tbody,\n\t\t\tsignal,\n\t\t}) as Promise<RESTPutAPIApplicationRoleConnectionMetadataResult>;\n\t}\n}\n","import type { RequestData, REST } from '@discordjs/rest';\nimport {\n\tRoutes,\n\ttype RESTGetAPIStickerResult,\n\ttype RESTGetNitroStickerPacksResult,\n\ttype Snowflake,\n} from 'discord-api-types/v10';\n\nexport class StickersAPI {\n\tpublic constructor(private readonly rest: REST) {}\n\n\t/**\n\t * Fetches all of the nitro sticker packs\n\t *\n\t * @see {@link https://discord.com/developers/docs/resources/sticker#list-nitro-sticker-packs}\n\t * @param options - The options to use when fetching the sticker packs\n\t */\n\tpublic async getNitroStickers({ signal }: Pick<RequestData, 'signal'> = {}) {\n\t\treturn this.rest.get(Routes.nitroStickerPacks(), { signal }) as Promise<RESTGetNitroStickerPacksResult>;\n\t}\n\n\t/**\n\t * Fetches a sticker\n\t *\n\t * @see {@link https://discord.com/developers/docs/resources/sticker#get-sticker}\n\t * @param stickerId - The id of the sticker\n\t * @param options - The options to use when fetching the sticker\n\t */\n\tpublic async get(stickerId: Snowflake, { signal }: Pick<RequestData, 'signal'> = {}) {\n\t\treturn this.rest.get(Routes.sticker(stickerId), { signal }) as Promise<RESTGetAPIStickerResult>;\n\t}\n}\n","import type { RawFile, RequestData, REST } from '@discordjs/rest';\nimport {\n\tRoutes,\n\ttype APIThreadChannel,\n\ttype APIThreadMember,\n\ttype RESTGetAPIChannelThreadMembersResult,\n\ttype RESTPostAPIChannelThreadsJSONBody,\n\ttype RESTPostAPIChannelThreadsResult,\n\ttype RESTPostAPIGuildForumThreadsJSONBody,\n\ttype Snowflake,\n} from 'discord-api-types/v10';\n\nexport interface StartForumThreadOptions extends RESTPostAPIGuildForumThreadsJSONBody {\n\tmessage: RESTPostAPIGuildForumThreadsJSONBody['message'] & { files?: RawFile[] };\n}\n\nexport class ThreadsAPI {\n\tpublic constructor(private readonly rest: REST) {}\n\n\t/**\n\t * Fetches a thread\n\t *\n\t * @see {@link https://discord.com/developers/docs/resources/channel#get-channel}\n\t * @param threadId - The id of the thread\n\t * @param options - The options to use when fetching the thread\n\t */\n\tpublic async get(threadId: Snowflake, { signal }: Pick<RequestData, 'signal'> = {}) {\n\t\treturn this.rest.get(Routes.channel(threadId), { signal }) as Promise<APIThreadChannel>;\n\t}\n\n\t/**\n\t * Creates a new thread\n\t *\n\t * @see {@link https://discord.com/developers/docs/resources/channel#start-thread-from-message}\n\t * @see {@link https://discord.com/developers/docs/resources/channel#start-thread-without-message}\n\t * @param channelId - The id of the channel to start the thread in\n\t * @param body - The data to use when starting the thread\n\t * @param messageId - The id of the message to start the thread from\n\t * @param options - The options to use when starting the thread\n\t */\n\tpublic async create(\n\t\tchannelId: Snowflake,\n\t\tbody: RESTPostAPIChannelThreadsJSONBody,\n\t\tmessageId?: Snowflake,\n\t\t{ signal }: Pick<RequestData, 'signal'> = {},\n\t) {\n\t\treturn this.rest.post(Routes.threads(channelId, messageId), {\n\t\t\tbody,\n\t\t\tsignal,\n\t\t}) as Promise<RESTPostAPIChannelThreadsResult>;\n\t}\n\n\t/**\n\t * Creates a new forum post\n\t *\n\t * @see {@link https://discord.com/developers/docs/resources/channel#start-thread-in-forum-channel}\n\t * @param channelId - The id of the forum channel to start the thread in\n\t * @param body - The data to use when starting the thread\n\t * @param options - The options to use when starting the thread\n\t */\n\tpublic async createForumThread(\n\t\tchannelId: Snowflake,\n\t\t{ message, ...optionsBody }: StartForumThreadOptions,\n\t\t{ signal }: Pick<RequestData, 'signal'> = {},\n\t) {\n\t\tconst { files, ...messageBody } = message;\n\n\t\tconst body = {\n\t\t\t...optionsBody,\n\t\t\tmessage: messageBody,\n\t\t};\n\n\t\treturn this.rest.post(Routes.threads(channelId), { files, body, signal }) as Promise<APIThreadChannel>;\n\t}\n\n\t/**\n\t * Adds the current user to a thread\n\t *\n\t * @see {@link https://discord.com/developers/docs/resources/channel#join-thread}\n\t * @param threadId - The id of the thread to join\n\t * @param options - The options to use when joining the thread\n\t */\n\tpublic async join(threadId: Snowflake, { signal }: Pick<RequestData, 'signal'> = {}) {\n\t\tawait this.rest.put(Routes.threadMembers(threadId, '@me'), { signal });\n\t}\n\n\t/**\n\t * Adds a member to a thread\n\t *\n\t * @see {@link https://discord.com/developers/docs/resources/channel#add-thread-member}\n\t * @param threadId - The id of the thread to add the member to\n\t * @param userId - The id of the user to add to the thread\n\t * @param options - The options to use when adding the member to the thread\n\t */\n\tpublic async addMember(threadId: Snowflake, userId: Snowflake, { signal }: Pick<RequestData, 'signal'> = {}) {\n\t\tawait this.rest.put(Routes.threadMembers(threadId, userId), { signal });\n\t}\n\n\t/**\n\t * Removes the current user from a thread\n\t *\n\t * @see {@link https://discord.com/developers/docs/resources/channel#leave-thread}\n\t * @param threadId - The id of the thread to leave\n\t * @param options - The options to use when leaving the thread\n\t */\n\tpublic async leave(threadId: Snowflake, { signal }: Pick<RequestData, 'signal'> = {}) {\n\t\tawait this.rest.delete(Routes.threadMembers(threadId, '@me'), { signal });\n\t}\n\n\t/**\n\t * Removes a member from a thread\n\t *\n\t * @see {@link https://discord.com/developers/docs/resources/channel#remove-thread-member}\n\t * @param threadId - The id of the thread to remove the member from\n\t * @param userId - The id of the user to remove from the thread\n\t * @param options - The options to use when removing the member from the thread\n\t */\n\tpublic async removeMember(threadId: Snowflake, userId: Snowflake, { signal }: Pick<RequestData, 'signal'> = {}) {\n\t\tawait this.rest.delete(Routes.threadMembers(threadId, userId), { signal });\n\t}\n\n\t/**\n\t * Fetches a member of a thread\n\t *\n\t * @see {@link https://discord.com/developers/docs/resources/channel#get-thread-member}\n\t * @param threadId - The id of the thread to fetch the member from\n\t * @param userId - The id of the user\n\t * @param options - The options to use when fetching the member\n\t */\n\tpublic async getMember(threadId: Snowflake, userId: Snowflake, { signal }: Pick<RequestData, 'signal'> = {}) {\n\t\treturn this.rest.get(Routes.threadMembers(threadId, userId), { signal }) as Promise<APIThreadMember>;\n\t}\n\n\t/**\n\t * Fetches all members of a thread\n\t *\n\t * @see {@link https://discord.com/developers/docs/resources/channel#list-thread-members}\n\t * @param threadId - The id of the thread to fetch the members from\n\t * @param options - The options to use when fetching the members\n\t */\n\tpublic async getAllMembers(threadId: Snowflake, { signal }: Pick<RequestData, 'signal'> = {}) {\n\t\treturn this.rest.get(Routes.threadMembers(threadId), { signal }) as Promise<RESTGetAPIChannelThreadMembersResult>;\n\t}\n}\n","import { makeURLSearchParams, type RequestData, type REST } from '@discordjs/rest';\nimport {\n\tRoutes,\n\ttype RESTGetAPICurrentUserApplicationRoleConnectionResult,\n\ttype RESTGetAPICurrentUserConnectionsResult,\n\ttype RESTGetAPICurrentUserGuildsQuery,\n\ttype RESTGetAPICurrentUserGuildsResult,\n\ttype RESTGetAPICurrentUserResult,\n\ttype RESTGetAPIUserResult,\n\ttype RESTGetCurrentUserGuildMemberResult,\n\ttype RESTPatchAPICurrentUserJSONBody,\n\ttype RESTPatchAPICurrentUserResult,\n\ttype RESTPatchAPIGuildMemberJSONBody,\n\ttype RESTPatchAPIGuildMemberResult,\n\ttype RESTPostAPICurrentUserCreateDMChannelResult,\n\ttype RESTPutAPICurrentUserApplicationRoleConnectionJSONBody,\n\ttype RESTPutAPICurrentUserApplicationRoleConnectionResult,\n\ttype Snowflake,\n} from 'discord-api-types/v10';\n\nexport class UsersAPI {\n\tpublic constructor(private readonly rest: REST) {}\n\n\t/**\n\t * Fetches a user by their id\n\t *\n\t * @see {@link https://discord.com/developers/docs/resources/user#get-user}\n\t * @param userId - The id of the user to fetch\n\t * @param options - The options to use when fetching the user\n\t */\n\tpublic async get(userId: Snowflake, { signal }: Pick<RequestData, 'signal'> = {}) {\n\t\treturn this.rest.get(Routes.user(userId), { signal }) as Promise<RESTGetAPIUserResult>;\n\t}\n\n\t/**\n\t * Returns the user object of the requester's account\n\t *\n\t * @see {@link https://discord.com/developers/docs/resources/user#get-current-user}\n\t * @param options - The options to use when fetching the current user\n\t */\n\tpublic async getCurrent({ signal }: Pick<RequestData, 'signal'> = {}) {\n\t\treturn this.rest.get(Routes.user('@me'), { signal }) as Promise<RESTGetAPICurrentUserResult>;\n\t}\n\n\t/**\n\t * Returns a list of partial guild objects the current user is a member of\n\t *\n\t * @see {@link https://discord.com/developers/docs/resources/user#get-current-user-guilds}\n\t * @param query - The query options to use when fetching the current user's guilds\n\t * @param options - The options to use when fetching the guilds\n\t */\n\tpublic async getGuilds(query: RESTGetAPICurrentUserGuildsQuery = {}, { signal }: Pick<RequestData, 'signal'> = {}) {\n\t\treturn this.rest.get(Routes.userGuilds(), {\n\t\t\tquery: makeURLSearchParams(query),\n\t\t\tsignal,\n\t\t}) as Promise<RESTGetAPICurrentUserGuildsResult>;\n\t}\n\n\t/**\n\t * Leaves the guild with the given id\n\t *\n\t * @see {@link https://discord.com/developers/docs/resources/user#leave-guild}\n\t * @param guildId - The id of the guild\n\t * @param options - The options for leaving the guild\n\t */\n\tpublic async leaveGuild(guildId: Snowflake, { signal }: Pick<RequestData, 'signal'> = {}) {\n\t\tawait this.rest.delete(Routes.userGuild(guildId), { signal });\n\t}\n\n\t/**\n\t * Edits the current user\n\t *\n\t * @see {@link https://discord.com/developers/docs/resources/user#modify-current-user}\n\t * @param body - The new data for the current user\n\t * @param options - The options for editing the user\n\t */\n\tpublic async edit(body: RESTPatchAPICurrentUserJSONBody, { signal }: Pick<RequestData, 'signal'> = {}) {\n\t\treturn this.rest.patch(Routes.user('@me'), { body, signal }) as Promise<RESTPatchAPICurrentUserResult>;\n\t}\n\n\t/**\n\t * Fetches the guild member for the current user\n\t *\n\t * @see {@link https://discord.com/developers/docs/resources/user#get-current-user-guild-member}\n\t * @param guildId - The id of the guild\n\t * @param options - The options for fetching the guild member\n\t */\n\tpublic async getGuildMember(guildId: Snowflake, { signal }: Pick<RequestData, 'signal'> = {}) {\n\t\treturn this.rest.get(Routes.userGuildMember(guildId), { signal }) as Promise<RESTGetCurrentUserGuildMemberResult>;\n\t}\n\n\t/**\n\t * Edits the guild member for the current user\n\t *\n\t * @see {@link https://discord.com/developers/docs/resources/guild#modify-current-member}\n\t * @param guildId - The id of the guild\n\t * @param body - The new data for the guild member\n\t * @param options - The options for editing the guild member\n\t */\n\tpublic async editCurrentGuildMember(\n\t\tguildId: Snowflake,\n\t\tbody: RESTPatchAPIGuildMemberJSONBody = {},\n\t\t{ reason, signal }: Pick<RequestData, 'reason' | 'signal'> = {},\n\t) {\n\t\treturn this.rest.patch(Routes.guildMember(guildId, '@me'), {\n\t\t\treason,\n\t\t\tbody,\n\t\t\tsignal,\n\t\t}) as Promise<RESTPatchAPIGuildMemberResult>;\n\t}\n\n\t/**\n\t * Opens a new DM channel with a user\n\t *\n\t * @see {@link https://discord.com/developers/docs/resources/user#create-dm}\n\t * @param userId - The id of the user to open a DM channel with\n\t * @param options - The options for opening the DM\n\t */\n\tpublic async createDM(userId: Snowflake, { signal }: Pick<RequestData, 'signal'> = {}) {\n\t\treturn this.rest.post(Routes.userChannels(), {\n\t\t\tbody: { recipient_id: userId },\n\t\t\tsignal,\n\t\t}) as Promise<RESTPostAPICurrentUserCreateDMChannelResult>;\n\t}\n\n\t/**\n\t * Gets the current user's connections\n\t *\n\t * @see {@link https://discord.com/developers/docs/resources/user#get-user-connections}\n\t * @param options - The options for fetching the user's connections\n\t */\n\tpublic async getConnections({ signal }: Pick<RequestData, 'signal'> = {}) {\n\t\treturn this.rest.get(Routes.userConnections(), { signal }) as Promise<RESTGetAPICurrentUserConnectionsResult>;\n\t}\n\n\t/**\n\t * Gets the current user's active application role connection\n\t *\n\t * @see {@link https://discord.com/developers/docs/resources/user#get-user-application-role-connection}\n\t * @param applicationId - The id of the application\n\t * @param options - The options for fetching the role connections\n\t */\n\tpublic async getApplicationRoleConnection(applicationId: Snowflake, { signal }: Pick<RequestData, 'signal'> = {}) {\n\t\treturn this.rest.get(Routes.userApplicationRoleConnection(applicationId), {\n\t\t\tsignal,\n\t\t}) as Promise<RESTGetAPICurrentUserApplicationRoleConnectionResult>;\n\t}\n\n\t/**\n\t * Updates the current user's application role connection\n\t *\n\t * @see {@link https://discord.com/developers/docs/resources/user#update-user-application-role-connection}\n\t * @param applicationId - The id of the application\n\t * @param body - The data to use when updating the application role connection\n\t * @param options - The options to use when updating the application role connection\n\t */\n\tpublic async updateApplicationRoleConnection(\n\t\tapplicationId: Snowflake,\n\t\tbody: RESTPutAPICurrentUserApplicationRoleConnectionJSONBody,\n\t\t{ signal }: Pick<RequestData, 'signal'> = {},\n\t) {\n\t\treturn this.rest.put(Routes.userApplicationRoleConnection(applicationId), {\n\t\t\tbody,\n\t\t\tsignal,\n\t\t}) as Promise<RESTPutAPICurrentUserApplicationRoleConnectionResult>;\n\t}\n}\n","import type { RequestData, REST } from '@discordjs/rest';\nimport { Routes, type RESTGetAPIVoiceRegionsResult } from 'discord-api-types/v10';\n\nexport class VoiceAPI {\n\tpublic constructor(private readonly rest: REST) {}\n\n\t/**\n\t * Fetches all voice regions\n\t *\n\t * @see {@link https://discord.com/developers/docs/resources/voice#list-voice-regions}\n\t * @param options - The options to use when fetching the voice regions\n\t */\n\tpublic async getVoiceRegions({ signal }: Pick<RequestData, 'signal'> = {}) {\n\t\treturn this.rest.get(Routes.voiceRegions(), { signal }) as Promise<RESTGetAPIVoiceRegionsResult>;\n\t}\n}\n","import { makeURLSearchParams, type RequestData, type RawFile, type REST } from '@discordjs/rest';\nimport {\n\tRoutes,\n\ttype RESTGetAPIWebhookWithTokenMessageQuery,\n\ttype RESTGetAPIChannelMessageResult,\n\ttype RESTGetAPIWebhookResult,\n\ttype RESTPatchAPIWebhookJSONBody,\n\ttype RESTPatchAPIWebhookResult,\n\ttype RESTPatchAPIWebhookWithTokenMessageJSONBody,\n\ttype RESTPatchAPIWebhookWithTokenMessageResult,\n\ttype RESTPostAPIChannelWebhookJSONBody,\n\ttype RESTPostAPIWebhookWithTokenGitHubQuery,\n\ttype RESTPostAPIWebhookWithTokenJSONBody,\n\ttype RESTPostAPIWebhookWithTokenQuery,\n\ttype RESTPostAPIWebhookWithTokenResult,\n\ttype RESTPostAPIWebhookWithTokenSlackQuery,\n\ttype RESTPostAPIWebhookWithTokenWaitResult,\n\ttype Snowflake,\n} from 'discord-api-types/v10';\n\nexport class WebhooksAPI {\n\tpublic constructor(private readonly rest: REST) {}\n\n\t/**\n\t * Fetches a webhook\n\t *\n\t * @see {@link https://discord.com/developers/docs/resources/webhook#get-webhook}\n\t * @see {@link https://discord.com/developers/docs/resources/webhook#get-webhook-with-token}\n\t * @param id - The id of the webhook\n\t * @param token - The token of the webhook\n\t * @param options - The options to use when fetching the webhook\n\t */\n\tpublic async get(id: Snowflake, token?: string, { signal }: Pick<RequestData, 'signal'> = {}) {\n\t\treturn this.rest.get(Routes.webhook(id, token), { signal }) as Promise<RESTGetAPIWebhookResult>;\n\t}\n\n\t/**\n\t * Creates a new webhook\n\t *\n\t * @see {@link https://discord.com/developers/docs/resources/webhook#create-webhook}\n\t * @param channelId - The id of the channel to create the webhook in\n\t * @param body - The data to use when creating the webhook\n\t * @param options - The options to use when creating the webhook\n\t */\n\tpublic async create(\n\t\tchannelId: Snowflake,\n\t\tbody: RESTPostAPIChannelWebhookJSONBody,\n\t\t{ reason, signal }: Pick<RequestData, 'reason' | 'signal'> = {},\n\t) {\n\t\treturn this.rest.post(Routes.channelWebhooks(channelId), {\n\t\t\treason,\n\t\t\tbody,\n\t\t\tsignal,\n\t\t}) as Promise<RESTPostAPIWebhookWithTokenResult>;\n\t}\n\n\t/**\n\t * Edits a webhook\n\t *\n\t * @see {@link https://discord.com/developers/docs/resources/webhook#modify-webhook}\n\t * @see {@link https://discord.com/developers/docs/resources/webhook#modify-webhook-with-token}\n\t * @param id - The id of the webhook to edit\n\t * @param body - The new webhook data\n\t * @param options - The options to use when editing the webhook\n\t */\n\tpublic async edit(\n\t\tid: Snowflake,\n\t\tbody: RESTPatchAPIWebhookJSONBody,\n\t\t{ token, reason, signal }: Pick<RequestData, 'reason' | 'signal'> & { token?: string | undefined } = {},\n\t) {\n\t\treturn this.rest.patch(Routes.webhook(id, token), {\n\t\t\treason,\n\t\t\tbody,\n\t\t\tsignal,\n\t\t}) as Promise<RESTPatchAPIWebhookResult>;\n\t}\n\n\t/**\n\t * Deletes a webhook\n\t *\n\t * @see {@link https://discord.com/developers/docs/resources/webhook#delete-webhook}\n\t * @see {@link https://discord.com/developers/docs/resources/webhook#delete-webhook-with-token}\n\t * @param id - The id of the webhook to delete\n\t * @param options - The options to use when deleting the webhook\n\t */\n\tpublic async delete(\n\t\tid: Snowflake,\n\t\t{ token, reason, signal }: Pick<RequestData, 'reason' | 'signal'> & { token?: string | undefined } = {},\n\t) {\n\t\tawait this.rest.delete(Routes.webhook(id, token), { reason, signal });\n\t}\n\n\t/**\n\t * Executes a webhook and returns the created message\n\t *\n\t * @see {@link https://discord.com/developers/docs/resources/webhook#execute-webhook}\n\t * @param id - The id of the webhook\n\t * @param token - The token of the webhook\n\t * @param body - The data to use when executing the webhook\n\t * @param options - The options to use when executing the webhook\n\t */\n\tpublic async execute(\n\t\tid: Snowflake,\n\t\ttoken: string,\n\t\tbody: RESTPostAPIWebhookWithTokenJSONBody & RESTPostAPIWebhookWithTokenQuery & { files?: RawFile[]; wait: true },\n\t\toptions?: Pick<RequestData, 'signal'>,\n\t): Promise<RESTPostAPIWebhookWithTokenWaitResult>;\n\n\t/**\n\t * Executes a webhook\n\t *\n\t * @see {@link https://discord.com/developers/docs/resources/webhook#execute-webhook}\n\t * @param id - The id of the webhook\n\t * @param token - The token of the webhook\n\t * @param body - The data to use when executing the webhook\n\t * @param options - The options to use when executing the webhook\n\t */\n\tpublic async execute(\n\t\tid: Snowflake,\n\t\ttoken: string,\n\t\tbody: RESTPostAPIWebhookWithTokenJSONBody & RESTPostAPIWebhookWithTokenQuery & { files?: RawFile[]; wait?: false },\n\t\toptions?: Pick<RequestData, 'signal'>,\n\t): Promise<void>;\n\n\t/**\n\t * Executes a webhook\n\t *\n\t * @see {@link https://discord.com/developers/docs/resources/webhook#execute-webhook}\n\t * @param id - The id of the webhook\n\t * @param token - The token of the webhook\n\t * @param body - The data to use when executing the webhook\n\t * @param options - The options to use when executing the webhook\n\t */\n\tpublic async execute(\n\t\tid: Snowflake,\n\t\ttoken: string,\n\t\t{\n\t\t\twait,\n\t\t\tthread_id,\n\t\t\tfiles,\n\t\t\t...body\n\t\t}: RESTPostAPIWebhookWithTokenJSONBody & RESTPostAPIWebhookWithTokenQuery & { files?: RawFile[] },\n\t\t{ signal }: Pick<RequestData, 'signal'> = {},\n\t) {\n\t\treturn this.rest.post(Routes.webhook(id, token), {\n\t\t\tquery: makeURLSearchParams({ wait, thread_id }),\n\t\t\tfiles,\n\t\t\tbody,\n\t\t\tauth: false,\n\t\t\tsignal,\n\t\t\t// eslint-disable-next-line @typescript-eslint/no-invalid-void-type\n\t\t}) as Promise<RESTPostAPIWebhookWithTokenWaitResult | void>;\n\t}\n\n\t/**\n\t * Executes a slack webhook\n\t *\n\t * @see {@link https://discord.com/developers/docs/resources/webhook#execute-slackcompatible-webhook}\n\t * @param id - The id of the webhook\n\t * @param token - The token of the webhook\n\t * @param query - The query options to use when executing the webhook\n\t * @param options - The options to use when executing the webhook\n\t */\n\tpublic async executeSlack(\n\t\tid: Snowflake,\n\t\ttoken: string,\n\t\tbody: unknown,\n\t\tquery: RESTPostAPIWebhookWithTokenSlackQuery = {},\n\t\t{ signal }: Pick<RequestData, 'signal'> = {},\n\t) {\n\t\tawait this.rest.post(Routes.webhookPlatform(id, token, 'slack'), {\n\t\t\tquery: makeURLSearchParams(query),\n\t\t\tbody,\n\t\t\tauth: false,\n\t\t\tsignal,\n\t\t});\n\t}\n\n\t/**\n\t * Executes a github webhook\n\t *\n\t * @see {@link https://discord.com/developers/docs/resources/webhook#execute-githubcompatible-webhook}\n\t * @param id - The id of the webhook\n\t * @param token - The token of the webhook\n\t * @param query - The options to use when executing the webhook\n\t * @param options - The options to use when executing the webhook\n\t */\n\tpublic async executeGitHub(\n\t\tid: Snowflake,\n\t\ttoken: string,\n\t\tbody: unknown,\n\t\tquery: RESTPostAPIWebhookWithTokenGitHubQuery = {},\n\t\t{ signal }: Pick<RequestData, 'signal'> = {},\n\t) {\n\t\tawait this.rest.post(Routes.webhookPlatform(id, token, 'github'), {\n\t\t\tquery: makeURLSearchParams(query),\n\t\t\tbody,\n\t\t\tsignal,\n\t\t\tauth: false,\n\t\t});\n\t}\n\n\t/**\n\t * Fetches an associated message from a webhook\n\t *\n\t * @see {@link https://discord.com/developers/docs/resources/webhook#get-webhook-message}\n\t * @param id - The id of the webhook\n\t * @param token - The token of the webhook\n\t * @param messageId - The id of the message to fetch\n\t * @param query - The query options to use when fetching the message\n\t * @param options - The options to use when fetching the message\n\t */\n\tpublic async getMessage(\n\t\tid: Snowflake,\n\t\ttoken: string,\n\t\tmessageId: Snowflake,\n\t\tquery: RESTGetAPIWebhookWithTokenMessageQuery = {},\n\t\t{ signal }: Pick<RequestData, 'signal'> = {},\n\t) {\n\t\treturn this.rest.get(Routes.webhookMessage(id, token, messageId), {\n\t\t\tquery: makeURLSearchParams(query),\n\t\t\tauth: false,\n\t\t\tsignal,\n\t\t}) as Promise<RESTGetAPIChannelMessageResult>;\n\t}\n\n\t/**\n\t * Edits an associated message from a webhook\n\t *\n\t * @see {@link https://discord.com/developers/docs/resources/webhook#edit-webhook-message}\n\t * @param id - The id of the webhook\n\t * @param token - The token of the webhook\n\t * @param messageId - The id of the message to edit\n\t * @param body - The data to use when editing the message\n\t * @param options - The options to use when editing the message\n\t */\n\tpublic async editMessage(\n\t\tid: Snowflake,\n\t\ttoken: string,\n\t\tmessageId: Snowflake,\n\t\t{\n\t\t\tthread_id,\n\t\t\tfiles,\n\t\t\t...body\n\t\t}: RESTPatchAPIWebhookWithTokenMessageJSONBody & { files?: RawFile[]; thread_id?: string },\n\t\t{ signal }: Pick<RequestData, 'signal'> = {},\n\t) {\n\t\treturn this.rest.patch(Routes.webhookMessage(id, token, messageId), {\n\t\t\tquery: makeURLSearchParams({ thread_id }),\n\t\t\tauth: false,\n\t\t\tbody,\n\t\t\tsignal,\n\t\t\tfiles,\n\t\t}) as Promise<RESTPatchAPIWebhookWithTokenMessageResult>;\n\t}\n\n\t/**\n\t * Deletes an associated message from a webhook\n\t *\n\t * @see {@link https://discord.com/developers/docs/resources/webhook#delete-webhook-message}\n\t * @param id - The id of the webhook\n\t * @param token - The token of the webhook\n\t * @param messageId - The id of the message to delete\n\t * @param query - The options to use when deleting the message\n\t * @param options - The options to use when deleting the message\n\t */\n\tpublic async deleteMessage(\n\t\tid: Snowflake,\n\t\ttoken: string,\n\t\tmessageId: Snowflake,\n\t\tquery: { thread_id?: string } = {},\n\t\t{ signal }: Pick<RequestData, 'signal'> = {},\n\t) {\n\t\tawait this.rest.delete(Routes.webhookMessage(id, token, messageId), {\n\t\t\tquery: makeURLSearchParams(query),\n\t\t\tauth: false,\n\t\t\tsignal,\n\t\t});\n\t}\n}\n","import type { REST } from '@discordjs/rest';\nimport { ApplicationCommandsAPI } from './applicationCommands.js';\nimport { ChannelsAPI } from './channel.js';\nimport { GuildsAPI } from './guild.js';\nimport { InteractionsAPI } from './interactions.js';\nimport { InvitesAPI } from './invite.js';\nimport { OAuth2API } from './oauth2.js';\nimport { RoleConnectionsAPI } from './roleConnections.js';\nimport { StickersAPI } from './sticker.js';\nimport { ThreadsAPI } from './thread.js';\nimport { UsersAPI } from './user.js';\nimport { VoiceAPI } from './voice.js';\nimport { WebhooksAPI } from './webhook.js';\n\nexport * from './applicationCommands.js';\nexport * from './channel.js';\nexport * from './guild.js';\nexport * from './interactions.js';\nexport * from './invite.js';\nexport * from './oauth2.js';\nexport * from './roleConnections.js';\nexport * from './sticker.js';\nexport * from './thread.js';\nexport * from './user.js';\nexport * from './voice.js';\nexport * from './webhook.js';\n\nexport class API {\n\tpublic readonly applicationCommands: ApplicationCommandsAPI;\n\n\tpublic readonly channels: ChannelsAPI;\n\n\tpublic readonly guilds: GuildsAPI;\n\n\tpublic readonly interactions: InteractionsAPI;\n\n\tpublic readonly invites: InvitesAPI;\n\n\tpublic readonly oauth2: OAuth2API;\n\n\tpublic readonly roleConnections: RoleConnectionsAPI;\n\n\tpublic readonly stickers: StickersAPI;\n\n\tpublic readonly threads: ThreadsAPI;\n\n\tpublic readonly users: UsersAPI;\n\n\tpublic readonly voice: VoiceAPI;\n\n\tpublic readonly webhooks: WebhooksAPI;\n\n\tpublic constructor(public readonly rest: REST) {\n\t\tthis.applicationCommands = new ApplicationCommandsAPI(rest);\n\t\tthis.channels = new ChannelsAPI(rest);\n\t\tthis.guilds = new GuildsAPI(rest);\n\t\tthis.invites = new InvitesAPI(rest);\n\t\tthis.roleConnections = new RoleConnectionsAPI(rest);\n\t\tthis.oauth2 = new OAuth2API(rest);\n\t\tthis.stickers = new StickersAPI(rest);\n\t\tthis.threads = new ThreadsAPI(rest);\n\t\tthis.users = new UsersAPI(rest);\n\t\tthis.voice = new VoiceAPI(rest);\n\t\tthis.webhooks = new WebhooksAPI(rest);\n\t\tthis.interactions = new InteractionsAPI(rest, this.webhooks);\n\t}\n}\n","import { setTimeout } from 'node:timers';\nimport type { REST } from '@discordjs/rest';\nimport { calculateShardId } from '@discordjs/util';\nimport { WebSocketShardEvents, type WebSocketManager } from '@discordjs/ws';\nimport { DiscordSnowflake } from '@sapphire/snowflake';\nimport { AsyncEventEmitter } from '@vladfrangu/async_event_emitter';\nimport {\n\tGatewayDispatchEvents,\n\tGatewayOpcodes,\n\ttype APIGuildMember,\n\ttype GatewayAutoModerationActionExecutionDispatchData,\n\ttype GatewayAutoModerationRuleCreateDispatchData,\n\ttype GatewayAutoModerationRuleDeleteDispatchData,\n\ttype GatewayAutoModerationRuleUpdateDispatchData,\n\ttype GatewayChannelCreateDispatchData,\n\ttype GatewayChannelDeleteDispatchData,\n\ttype GatewayChannelPinsUpdateDispatchData,\n\ttype GatewayChannelUpdateDispatchData,\n\ttype GatewayGuildAuditLogEntryCreateDispatchData,\n\ttype GatewayGuildBanAddDispatchData,\n\ttype GatewayGuildBanRemoveDispatchData,\n\ttype GatewayGuildCreateDispatchData,\n\ttype GatewayGuildDeleteDispatchData,\n\ttype GatewayGuildEmojisUpdateDispatchData,\n\ttype GatewayGuildIntegrationsUpdateDispatchData,\n\ttype GatewayGuildMemberAddDispatchData,\n\ttype GatewayGuildMemberRemoveDispatchData,\n\ttype GatewayGuildMemberUpdateDispatchData,\n\ttype GatewayGuildMembersChunkDispatchData,\n\ttype GatewayGuildRoleCreateDispatchData,\n\ttype GatewayGuildRoleDeleteDispatchData,\n\ttype GatewayGuildRoleUpdateDispatchData,\n\ttype GatewayGuildScheduledEventCreateDispatchData,\n\ttype GatewayGuildScheduledEventDeleteDispatchData,\n\ttype GatewayGuildScheduledEventUpdateDispatchData,\n\ttype GatewayGuildScheduledEventUserAddDispatchData,\n\ttype GatewayGuildScheduledEventUserRemoveDispatchData,\n\ttype GatewayGuildStickersUpdateDispatchData,\n\ttype GatewayGuildUpdateDispatchData,\n\ttype GatewayIntegrationCreateDispatchData,\n\ttype GatewayIntegrationDeleteDispatchData,\n\ttype GatewayIntegrationUpdateDispatchData,\n\ttype GatewayInteractionCreateDispatchData,\n\ttype GatewayInviteCreateDispatchData,\n\ttype GatewayInviteDeleteDispatchData,\n\ttype GatewayMessageCreateDispatchData,\n\ttype GatewayMessageDeleteBulkDispatchData,\n\ttype GatewayMessageDeleteDispatchData,\n\ttype GatewayMessageReactionAddDispatchData,\n\ttype GatewayMessageReactionRemoveAllDispatchData,\n\ttype GatewayMessageReactionRemoveDispatchData,\n\ttype GatewayMessageReactionRemoveEmojiDispatchData,\n\ttype GatewayMessageUpdateDispatchData,\n\ttype GatewayPresenceUpdateData,\n\ttype GatewayPresenceUpdateDispatchData,\n\ttype GatewayReadyDispatchData,\n\ttype GatewayRequestGuildMembersData,\n\ttype GatewayStageInstanceCreateDispatchData,\n\ttype GatewayStageInstanceDeleteDispatchData,\n\ttype GatewayStageInstanceUpdateDispatchData,\n\ttype GatewayThreadCreateDispatchData,\n\ttype GatewayThreadDeleteDispatchData,\n\ttype GatewayThreadListSyncDispatchData,\n\ttype GatewayThreadMemberUpdateDispatchData,\n\ttype GatewayThreadMembersUpdateDispatchData,\n\ttype GatewayThreadUpdateDispatchData,\n\ttype GatewayTypingStartDispatchData,\n\ttype GatewayUserUpdateDispatchData,\n\ttype GatewayVoiceServerUpdateDispatchData,\n\ttype GatewayVoiceStateUpdateData,\n\ttype GatewayVoiceStateUpdateDispatchData,\n\ttype GatewayWebhooksUpdateDispatchData,\n} from 'discord-api-types/v10';\nimport { API } from './api/index.js';\n\nexport interface IntrinsicProps {\n\t/**\n\t * The REST API\n\t */\n\tapi: API;\n\t/**\n\t * The id of the shard that emitted the event\n\t */\n\tshardId: number;\n}\n\nexport interface WithIntrinsicProps<T> extends IntrinsicProps {\n\tdata: T;\n}\n\nexport interface MappedEvents {\n\t[GatewayDispatchEvents.AutoModerationActionExecution]: [\n\t\tWithIntrinsicProps<GatewayAutoModerationActionExecutionDispatchData>,\n\t];\n\t[GatewayDispatchEvents.AutoModerationRuleCreate]: [WithIntrinsicProps<GatewayAutoModerationRuleCreateDispatchData>];\n\t[GatewayDispatchEvents.AutoModerationRuleDelete]: [WithIntrinsicProps<GatewayAutoModerationRuleDeleteDispatchData>];\n\t[GatewayDispatchEvents.AutoModerationRuleUpdate]: [WithIntrinsicProps<GatewayAutoModerationRuleUpdateDispatchData>];\n\t[GatewayDispatchEvents.ChannelCreate]: [WithIntrinsicProps<GatewayChannelCreateDispatchData>];\n\t[GatewayDispatchEvents.ChannelDelete]: [WithIntrinsicProps<GatewayChannelDeleteDispatchData>];\n\t[GatewayDispatchEvents.ChannelPinsUpdate]: [WithIntrinsicProps<GatewayChannelPinsUpdateDispatchData>];\n\t[GatewayDispatchEvents.ChannelUpdate]: [WithIntrinsicProps<GatewayChannelUpdateDispatchData>];\n\t[GatewayDispatchEvents.GuildAuditLogEntryCreate]: [WithIntrinsicProps<GatewayGuildAuditLogEntryCreateDispatchData>];\n\t[GatewayDispatchEvents.GuildBanAdd]: [WithIntrinsicProps<GatewayGuildBanAddDispatchData>];\n\t[GatewayDispatchEvents.GuildBanRemove]: [WithIntrinsicProps<GatewayGuildBanRemoveDispatchData>];\n\t[GatewayDispatchEvents.GuildCreate]: [WithIntrinsicProps<GatewayGuildCreateDispatchData>];\n\t[GatewayDispatchEvents.GuildDelete]: [WithIntrinsicProps<GatewayGuildDeleteDispatchData>];\n\t[GatewayDispatchEvents.GuildEmojisUpdate]: [WithIntrinsicProps<GatewayGuildEmojisUpdateDispatchData>];\n\t[GatewayDispatchEvents.GuildIntegrationsUpdate]: [WithIntrinsicProps<GatewayGuildIntegrationsUpdateDispatchData>];\n\t[GatewayDispatchEvents.GuildMemberAdd]: [WithIntrinsicProps<GatewayGuildMemberAddDispatchData>];\n\t[GatewayDispatchEvents.GuildMemberRemove]: [WithIntrinsicProps<GatewayGuildMemberRemoveDispatchData>];\n\t[GatewayDispatchEvents.GuildMemberUpdate]: [WithIntrinsicProps<GatewayGuildMemberUpdateDispatchData>];\n\t[GatewayDispatchEvents.GuildMembersChunk]: [WithIntrinsicProps<GatewayGuildMembersChunkDispatchData>];\n\t[GatewayDispatchEvents.GuildRoleCreate]: [WithIntrinsicProps<GatewayGuildRoleCreateDispatchData>];\n\t[GatewayDispatchEvents.GuildRoleDelete]: [WithIntrinsicProps<GatewayGuildRoleDeleteDispatchData>];\n\t[GatewayDispatchEvents.GuildRoleUpdate]: [WithIntrinsicProps<GatewayGuildRoleUpdateDispatchData>];\n\t[GatewayDispatchEvents.GuildScheduledEventCreate]: [WithIntrinsicProps<GatewayGuildScheduledEventCreateDispatchData>];\n\t[GatewayDispatchEvents.GuildScheduledEventDelete]: [WithIntrinsicProps<GatewayGuildScheduledEventDeleteDispatchData>];\n\t[GatewayDispatchEvents.GuildScheduledEventUpdate]: [WithIntrinsicProps<GatewayGuildScheduledEventUpdateDispatchData>];\n\t[GatewayDispatchEvents.GuildScheduledEventUserAdd]: [\n\t\tWithIntrinsicProps<GatewayGuildScheduledEventUserAddDispatchData>,\n\t];\n\t[GatewayDispatchEvents.GuildScheduledEventUserRemove]: [\n\t\tWithIntrinsicProps<GatewayGuildScheduledEventUserRemoveDispatchData>,\n\t];\n\t[GatewayDispatchEvents.GuildStickersUpdate]: [WithIntrinsicProps<GatewayGuildStickersUpdateDispatchData>];\n\t[GatewayDispatchEvents.GuildUpdate]: [WithIntrinsicProps<GatewayGuildUpdateDispatchData>];\n\t[GatewayDispatchEvents.IntegrationCreate]: [WithIntrinsicProps<GatewayIntegrationCreateDispatchData>];\n\t[GatewayDispatchEvents.IntegrationDelete]: [WithIntrinsicProps<GatewayIntegrationDeleteDispatchData>];\n\t[GatewayDispatchEvents.IntegrationUpdate]: [WithIntrinsicProps<GatewayIntegrationUpdateDispatchData>];\n\t[GatewayDispatchEvents.InteractionCreate]: [WithIntrinsicProps<GatewayInteractionCreateDispatchData>];\n\t[GatewayDispatchEvents.InviteCreate]: [WithIntrinsicProps<GatewayInviteCreateDispatchData>];\n\t[GatewayDispatchEvents.InviteDelete]: [WithIntrinsicProps<GatewayInviteDeleteDispatchData>];\n\t[GatewayDispatchEvents.MessageCreate]: [WithIntrinsicProps<GatewayMessageCreateDispatchData>];\n\t[GatewayDispatchEvents.MessageDelete]: [WithIntrinsicProps<GatewayMessageDeleteDispatchData>];\n\t[GatewayDispatchEvents.MessageDeleteBulk]: [WithIntrinsicProps<GatewayMessageDeleteBulkDispatchData>];\n\t[GatewayDispatchEvents.MessageReactionAdd]: [WithIntrinsicProps<GatewayMessageReactionAddDispatchData>];\n\t[GatewayDispatchEvents.MessageReactionRemove]: [WithIntrinsicProps<GatewayMessageReactionRemoveDispatchData>];\n\t[GatewayDispatchEvents.MessageReactionRemoveAll]: [WithIntrinsicProps<GatewayMessageReactionRemoveAllDispatchData>];\n\t[GatewayDispatchEvents.MessageReactionRemoveEmoji]: [\n\t\tWithIntrinsicProps<GatewayMessageReactionRemoveEmojiDispatchData>,\n\t];\n\t[GatewayDispatchEvents.MessageUpdate]: [WithIntrinsicProps<GatewayMessageUpdateDispatchData>];\n\t[GatewayDispatchEvents.PresenceUpdate]: [WithIntrinsicProps<GatewayPresenceUpdateDispatchData>];\n\t[GatewayDispatchEvents.Ready]: [WithIntrinsicProps<GatewayReadyDispatchData>];\n\t[GatewayDispatchEvents.Resumed]: [WithIntrinsicProps<never>];\n\t[GatewayDispatchEvents.StageInstanceCreate]: [WithIntrinsicProps<GatewayStageInstanceCreateDispatchData>];\n\t[GatewayDispatchEvents.StageInstanceDelete]: [WithIntrinsicProps<GatewayStageInstanceDeleteDispatchData>];\n\t[GatewayDispatchEvents.StageInstanceUpdate]: [WithIntrinsicProps<GatewayStageInstanceUpdateDispatchData>];\n\t[GatewayDispatchEvents.ThreadCreate]: [WithIntrinsicProps<GatewayThreadCreateDispatchData>];\n\t[GatewayDispatchEvents.ThreadDelete]: [WithIntrinsicProps<GatewayThreadDeleteDispatchData>];\n\t[GatewayDispatchEvents.ThreadListSync]: [WithIntrinsicProps<GatewayThreadListSyncDispatchData>];\n\t[GatewayDispatchEvents.ThreadMemberUpdate]: [WithIntrinsicProps<GatewayThreadMemberUpdateDispatchData>];\n\t[GatewayDispatchEvents.ThreadMembersUpdate]: [WithIntrinsicProps<GatewayThreadMembersUpdateDispatchData>];\n\t[GatewayDispatchEvents.ThreadUpdate]: [WithIntrinsicProps<GatewayThreadUpdateDispatchData>];\n\t[GatewayDispatchEvents.TypingStart]: [WithIntrinsicProps<GatewayTypingStartDispatchData>];\n\t[GatewayDispatchEvents.UserUpdate]: [WithIntrinsicProps<GatewayUserUpdateDispatchData>];\n\t[GatewayDispatchEvents.VoiceServerUpdate]: [WithIntrinsicProps<GatewayVoiceServerUpdateDispatchData>];\n\t[GatewayDispatchEvents.VoiceStateUpdate]: [WithIntrinsicProps<GatewayVoiceStateUpdateDispatchData>];\n\t[GatewayDispatchEvents.WebhooksUpdate]: [WithIntrinsicProps<GatewayWebhooksUpdateDispatchData>];\n}\n\nexport type ManagerShardEventsMap = {\n\t[K in keyof MappedEvents]: MappedEvents[K];\n};\n\nexport interface ClientOptions {\n\trest: REST;\n\tws: WebSocketManager;\n}\n\nexport class Client extends AsyncEventEmitter<ManagerShardEventsMap> {\n\tpublic readonly rest: REST;\n\n\tpublic readonly ws: WebSocketManager;\n\n\tpublic readonly api: API;\n\n\tpublic constructor({ rest, ws }: ClientOptions) {\n\t\tsuper();\n\t\tthis.rest = rest;\n\t\tthis.ws = ws;\n\t\tthis.api = new API(rest);\n\n\t\tthis.ws.on(WebSocketShardEvents.Dispatch, ({ data: dispatch, shardId }) => {\n\t\t\t// @ts-expect-error event props can't be resolved properly, but they are correct\n\t\t\tthis.emit(dispatch.t, this.wrapIntrinsicProps(dispatch.d, shardId));\n\t\t});\n\t}\n\n\t/**\n\t * Requests guild members from the gateway.\n\t *\n\t * @see {@link https://discord.com/developers/docs/topics/gateway-events#request-guild-members}\n\t * @param options - The options for the request\n\t * @param timeout - The timeout for waiting for each guild members chunk event\n\t */\n\tpublic async requestGuildMembers(options: GatewayRequestGuildMembersData, timeout = 10_000) {\n\t\tconst shardId = calculateShardId(options.guild_id, await this.ws.getShardCount());\n\t\tconst nonce = options.nonce ?? DiscordSnowflake.generate().toString();\n\n\t\tconst promise = new Promise<APIGuildMember[]>((resolve, reject) => {\n\t\t\tconst guildMembers: APIGuildMember[] = [];\n\n\t\t\tconst timer = setTimeout(() => {\n\t\t\t\treject(new Error('Request timed out'));\n\t\t\t}, timeout);\n\n\t\t\tconst handler = ({ data }: MappedEvents[GatewayDispatchEvents.GuildMembersChunk][0]) => {\n\t\t\t\ttimer.refresh();\n\n\t\t\t\tif (data.nonce !== nonce) return;\n\n\t\t\t\tguildMembers.push(...data.members);\n\n\t\t\t\tif (data.chunk_index >= data.chunk_count - 1) {\n\t\t\t\t\tthis.off(GatewayDispatchEvents.GuildMembersChunk, handler);\n\t\t\t\t\tresolve(guildMembers);\n\t\t\t\t}\n\t\t\t};\n\n\t\t\tthis.on(GatewayDispatchEvents.GuildMembersChunk, handler);\n\t\t});\n\n\t\tawait this.ws.send(shardId, {\n\t\t\top: GatewayOpcodes.RequestGuildMembers,\n\t\t\t// eslint-disable-next-line id-length\n\t\t\td: {\n\t\t\t\t...options,\n\t\t\t\tnonce,\n\t\t\t},\n\t\t});\n\n\t\treturn promise;\n\t}\n\n\t/**\n\t * Updates the voice state of the bot user\n\t *\n\t * @see {@link https://discord.com/developers/docs/topics/gateway-events#update-voice-state}\n\t * @param options - The options for updating the voice state\n\t */\n\tpublic async updateVoiceState(options: GatewayVoiceStateUpdateData) {\n\t\tconst shardId = calculateShardId(options.guild_id, await this.ws.getShardCount());\n\n\t\tawait this.ws.send(shardId, {\n\t\t\top: GatewayOpcodes.VoiceStateUpdate,\n\t\t\t// eslint-disable-next-line id-length\n\t\t\td: options,\n\t\t});\n\t}\n\n\t/**\n\t * Updates the presence of the bot user\n\t *\n\t * @param shardId - The id of the shard to update the presence in\n\t * @param options - The options for updating the presence\n\t */\n\tpublic async updatePresence(shardId: number, options: GatewayPresenceUpdateData) {\n\t\tawait this.ws.send(shardId, {\n\t\t\top: GatewayOpcodes.PresenceUpdate,\n\t\t\t// eslint-disable-next-line id-length\n\t\t\td: options,\n\t\t});\n\t}\n\n\tprivate wrapIntrinsicProps<T>(obj: T, shardId: number): WithIntrinsicProps<T> {\n\t\treturn {\n\t\t\tapi: this.api,\n\t\t\tshardId,\n\t\t\tdata: obj,\n\t\t};\n\t}\n}\n","import type { RawFile } from '@discordjs/rest';\nimport type { APIInteractionResponseCallbackData } from 'discord-api-types/v10';\n\nexport interface DescriptiveRawFile extends RawFile {\n\tdescription?: string;\n}\n\n/**\n * A utility function to create a form data payload given an array of file buffers\n *\n * @param files - The files to create a form data payload for\n * @param options - The additional options for the form data payload\n */\nexport function withFiles(files: DescriptiveRawFile[], options: APIInteractionResponseCallbackData) {\n\tconst body = {\n\t\t...options,\n\t\tattachments: files.map((file, index) => ({\n\t\t\tid: index.toString(),\n\t\t\tdescription: file.description,\n\t\t})),\n\t};\n\n\tconst outputFiles = files.map((file, index) => ({\n\t\tname: file.name ?? index.toString(),\n\t\tdata: file.data,\n\t}));\n\n\treturn { body, files: outputFiles };\n}\n","export * from './api/index.js';\nexport * from './client.js';\nexport * from './util/index.js';\n\nexport * from 'discord-api-types/v10';\n\n/**\n * The {@link https://github.com/discordjs/discord.js/blob/main/packages/core/#readme | @discordjs/core} version\n * that you are currently using.\n */\n// This needs to explicitly be `string` so it is not typed as a \"const string\" that gets injected by esbuild\nexport const version = '0.5.2' as string;\n"],"mappings":"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","names":["makeURLSearchParams","Routes","Routes","makeURLSearchParams","makeURLSearchParams","Routes","Routes","makeURLSearchParams","Routes","Routes","makeURLSearchParams","Routes","Routes","makeURLSearchParams","makeURLSearchParams","Routes","Routes","makeURLSearchParams","Routes","Routes","Routes","Routes","Routes","Routes","makeURLSearchParams","Routes","Routes","makeURLSearchParams","Routes","Routes","makeURLSearchParams","Routes","Routes","makeURLSearchParams"]}